"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1772],{76301:function(e,n,t){t.d(n,{Ak:function(){return N},Cj:function(){return Q},K4:function(){return er},Qn:function(){return O},RJ:function(){return W},SW:function(){return R},T_:function(){return z},UH:function(){return U},UM:function(){return en},Ve:function(){return K},_d:function(){return B},_f:function(){return et},by:function(){return J},cz:function(){return F},he:function(){return E},j$:function(){return D},kB:function(){return X},kU:function(){return Y},kx:function(){return M},nD:function(){return j},nP:function(){return ea},pY:function(){return ei},qd:function(){return L},t1:function(){return H},yR:function(){return V},zR:function(){return ee}});var r,i,a,o,s,c,u,d,l,y,m,q,_,$,I,f,b,p,v,h,g,S,w,x,T,k,A,P,Z,C=t(71383),G=t(75063),F=(0,G.Ps)(r||(r=(0,C.Z)(["\n  query GetAddressForSelect($q: String, $entity: String!, $entityId: Int!) {\n    items: Address(\n      where: {\n        Address_Entities: { entity: { _eq: $entity }, entityId: { _eq: $entityId } }\n        _or: [\n          { addressLine1: { _eq: $q } }\n          { addressLine2: { _eq: $q } }\n          { addressLine3: { _eq: $q } }\n          { county: { _eq: $q } }\n          { postCode: { _eq: $q } }\n          { city: { _eq: $q } }\n        ]\n      }\n    ) {\n      label: addressLine1\n      value: id\n      id\n      name\n      addressLine1\n      addressLine2\n      addressLine3\n      postCode\n      county\n      country: Country {\n        name\n      }\n      city\n      Address_Entities {\n        invoice\n      }\n    }\n  }\n"]))),L=(0,G.Ps)(i||(i=(0,C.Z)(["\n  query GetAccountsForSelect($q: String, $type: String, $limit: Int, $offset: Int) {\n    items: Account(\n      where: { name: { _ilike: $q }, type: { _eq: $type } }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]))),j=(0,G.Ps)(a||(a=(0,C.Z)(['\n  query GetTaxonomy($q: String, $id: Int) {\n    items: Taxonomy(\n      where: { type: { _eq: "assetCategory" }, status: { _eq: "active" } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      options: Taxonomies(\n        where: {\n          type: { _eq: "assetCategory" }\n          name: { _ilike: $q }\n          id: { _eq: $id }\n          status: { _eq: "active" }\n        }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']))),U=(0,G.Ps)(o||(o=(0,C.Z)(["\n  query GetAssetsForSelect($locationId: Int, $q: String, $categoryId: Int, $bookable: String) {\n    items: Asset(\n      where: {\n        categoryId: { _eq: $categoryId }\n        locationId: { _eq: $locationId }\n        name: { _ilike: $q }\n        bookable: { _eq: $bookable }\n      }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n      parent: ParentAsset {\n        id\n        name\n      }\n      media: Media {\n        id\n        item: Medium {\n          id\n          name\n          filename\n          meta\n          category\n          type\n        }\n      }\n    }\n  }\n"]))),R=(0,G.Ps)(s||(s=(0,C.Z)(['\n  query GetCustomersForSelect($q: String, $limit: Int, $offset: Int) {\n    items: Account(\n      where: { name: { _ilike: $q }, type: { _eq: "customer" } }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      admin: Admins {\n        id: adminId\n      }\n      label: name\n      spendThreshold: meta(path: "$.finance.spendThreshold")\n      serviceRateLabour: meta(path: "$.finance.serviceRateLabour")\n      serviceRateExpenses: meta(path: "$.finance.serviceRateExpenses")\n      value: id\n    }\n  }\n']))),O=(0,G.Ps)(c||(c=(0,C.Z)(["\n  query GetJobsForSelect($_q: Int, $locationId: Int) {\n    items: Job(\n      where: {\n        Location: { id: { _eq: $locationId } }\n        _or: [{ id: { _eq: $_q } }, { Invoices: { id: { _eq: $_q } } }]\n      }\n      order_by: { title: asc }\n    ) {\n      label: label\n      value: id\n      number\n      createdAt\n      description\n      status\n      timingStart\n      title\n      type\n      Location {\n        name\n      }\n      Taxonomy {\n        Taxonomy {\n          shortJobDescription: name\n        }\n      }\n    }\n  }\n"]))),E=(0,G.Ps)(u||(u=(0,C.Z)(['\n  query GetManagersForSelect($userId: Int, $accountId: Int!, $q: String) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: {\n          role: { _in: ["owner", "manager"] }\n          status: { _eq: "active" }\n          Account: { id: { _eq: $accountId } }\n        }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n        id: { _neq: $userId }\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n    }\n  }\n']))),N=(0,G.Ps)(d||(d=(0,C.Z)(['\n  query GetManagersForSelect(\n    $userId: Int\n    $accountId: Int!\n    $q: String\n    $invoiceThreshold: numeric\n    $quoteThreshold: numeric\n  ) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: {\n          role: { _in: ["owner", "manager"] }\n          status: { _eq: "active" }\n          Account: { id: { _eq: $accountId } }\n        }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n        id: { _neq: $userId }\n        _and: [\n          {\n            _or: [\n              { invoiceThreshold: { _gt: $invoiceThreshold } }\n              { invoiceThreshold: { _is_null: true } }\n            ]\n          }\n          {\n            _or: [\n              { quoteThreshold: { _gt: $quoteThreshold } }\n              { quoteThreshold: { _is_null: true } }\n            ]\n          }\n        ]\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n    }\n  }\n']))),D=(0,G.Ps)(l||(l=(0,C.Z)(["\n  query GetPostCodeAreaForSelect($countryId: Int, $q: String) {\n    items: PostcodeArea(\n      where: { name: { _ilike: $q }, countryId: { _eq: $countryId } }\n      order_by: { name: asc }\n    ) {\n      area\n      label: name\n      value: id\n    }\n  }\n"]))),B=(0,G.Ps)(y||(y=(0,C.Z)(['\n  query GetPropertiesForSelect($where: Location_bool_exp, $limit: Int, $offset: Int) {\n    items: Location(where: $where, order_by: { name: asc }, limit: $limit, offset: $offset) {\n      label: name\n      value: id\n      access\n      permitsRequired\n      registeredAddress: Addresses(\n        where: { entity: { _eq: "Location" }, registered: { _eq: true } }\n      ) {\n        address: Address {\n          id\n          addressLine1\n          addressLine2\n          addressLine3\n          county\n          country: Country {\n            name\n          }\n          postCode\n          city\n        }\n      }\n    }\n  }\n']))),M=(0,G.Ps)(m||(m=(0,C.Z)(['\n  query GetServicesForSelect($q: String, $limit: Int, $offset: Int) {\n    items: Service(\n      where: { name: { _ilike: $q }, status: { _eq: "active" } }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n']))),H=(0,G.Ps)(q||(q=(0,C.Z)(["\n  query GetSlasForSelect($q: String, $adminId: Int, $type: String) {\n    items: SLA(\n      where: { name: { _ilike: $q }, type: { _eq: $type }, adminId: { _eq: $adminId } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]))),z=(0,G.Ps)(_||(_=(0,C.Z)(["\n  query GetSlasForSelectNew($where: SLA_bool_exp, $limit: Int, $offset: Int) {\n    items: SLA(where: $where, order_by: { name: asc }, limit: $limit, offset: $offset) {\n      label: name\n      value: id\n    }\n  }\n"]))),J=(0,G.Ps)($||($=(0,C.Z)(["\n  query GetSuppliersForSelect($where: Account_bool_exp, $limit: Int, $offset: Int) {\n    items: Account(where: $where, limit: $limit, offset: $offset, order_by: { name: asc }) {\n      label: name\n      value: id\n    }\n  }\n"]))),V=(0,G.Ps)(I||(I=(0,C.Z)(['\n  query GetUsersForSelect($accountId: Int, $q: String, $limit: Int, $offset: Int) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: {\n          accountId: { _eq: $accountId }\n          isContact: { _eq: true }\n          status: { _eq: "active" }\n        }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n      }\n      order_by: { nameFirst: asc }\n      limit: $limit\n      offset: $offset\n    ) {\n      label: fullName\n      value: id\n      email\n      phone\n    }\n  }\n']))),W=(0,G.Ps)(f||(f=(0,C.Z)(['\n  query GetUsersForSelect($q: String) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n      email\n      phone\n    }\n  }\n']))),Q=(0,G.Ps)(b||(b=(0,C.Z)(["\n  query GetTaxonomyGroupForSelect($q: String, $type: String!) {\n    items: Taxonomy(\n      where: { isGroup: { _eq: true }, name: { _ilike: $q }, type: { _eq: $type } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]))),K=(0,G.Ps)(p||(p=(0,C.Z)(['\n  query GetTaxonomy($q: String) {\n    items: Taxonomy(where: { type: { _eq: "expenseCategoryGroup" } }, order_by: { name: asc }) {\n      label: name\n      options: Taxonomies(\n        where: { type: { _eq: "expenseCategory" }, name: { _ilike: $q } }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']))),Y=(0,G.Ps)(v||(v=(0,C.Z)(['\n  query GetCompliancesForSelect($q: String, $locationId: Int) {\n    items: Taxonomy(where: { type: { _eq: "complianceCategory" } }, order_by: { name: asc }) {\n      label: name\n      options: Compliances(\n        where: {\n          name: { _ilike: $q }\n          Compliance_Entities: { Location: { id: { _eq: $locationId } } }\n        }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']))),X=(0,G.Ps)(h||(h=(0,C.Z)(["\n  query GetUserRole($userId: Int!, $accountId: Int!) {\n    accountUsers: Account_User(\n      where: { userId: { _eq: $userId }, accountId: { _eq: $accountId } }\n    ) {\n      role\n    }\n  }\n"]))),ee=(0,G.Ps)(g||(g=(0,C.Z)(["\n  query GetSublocationsForSelect($locationId: Int!, $q: String, $limit: Int, $offset: Int) {\n    items: Sublocation(\n      where: { name: { _ilike: $q }, locationId: { _eq: $locationId }, active: { _eq: true } }\n      limit: $limit\n      offset: $offset\n      order_by: { createdAt: desc }\n    ) {\n      value: id\n      label: name\n    }\n  }\n"]))),en=(0,G.Ps)(S||(S=(0,C.Z)(['\n  query GetTaxonomy($q: String, $id: Int, $limit: Int, $offset: Int) {\n    items: Taxonomy(\n      where: {\n        id: { _eq: $id }\n        type: { _eq: "assetCategory" }\n        isGroup: { _eq: false }\n        status: { _eq: "active" }\n        name: { _ilike: $q }\n      }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n']))),et=(0,G.Ps)(w||(w=(0,C.Z)(["\n  query GetTaxonomyForSelect(\n    $where: Taxonomy_bool_exp\n    $limit: Int\n    $offset: Int\n    $orderBy: Taxonomy_order_by!\n  ) {\n    items: Taxonomy(where: $where, limit: $limit, offset: $offset, order_by: [$orderBy]) {\n      value: id\n      label: name\n    }\n  }\n"])));(0,G.Ps)(x||(x=(0,C.Z)(['\n  query GetTagsForTask($q: String!, $limit: Int = 50, $offset: Int = 0) {\n    items: Taxonomy(\n      where: { name: { _ilike: $q }, status: { _eq: "active" }, type: { _eq: "taskTags" } }\n      limit: $limit\n      offset: $offset\n      order_by: { id: desc }\n    ) {\n      value: id\n      label: name\n    }\n  }\n']))),(0,G.Ps)(T||(T=(0,C.Z)(['\n  query GetTagsForEntity(\n    $entityId: Int\n    $entity: String!\n    $q: String!\n    $limit: Int = 50\n    $offset: Int = 0\n  ) {\n    tags: Taxonomy(\n      where: {\n        name: { _ilike: $q }\n        status: { _eq: "active" }\n        type: { _eq: "taskTags" }\n        _not: { Taxonomy_Entities: { entity: { _eq: $entity }, entityId: { _eq: $entityId } } }\n      }\n      limit: $limit\n      offset: $offset\n      order_by: { id: desc }\n    ) {\n      id\n      name\n      meta\n    }\n  }\n']))),(0,G.Ps)(k||(k=(0,C.Z)(['\n  query GetEntityTags($entityId: Int!, $entity: String!) {\n    tags: Taxonomy_Entity(\n      where: {\n        entity: { _eq: $entity }\n        entityId: { _eq: $entityId }\n        Taxonomy: { status: { _eq: "active" }, type: { _eq: "taskTags" } }\n      }\n      order_by: { id: desc }\n    ) {\n      id\n      tag: Taxonomy {\n        id\n        name\n        meta\n      }\n    }\n  }\n'])));var er=(0,G.Ps)(A||(A=(0,C.Z)(["\n  query GetCustomerManagers($accountId: Int, $q: String, $limit: Int, $offset: Int) {\n    items: User(\n      where: { Account_Users: { accountId: { _eq: $accountId } }, fullName: { _ilike: $q } }\n      order_by: { fullName: asc }\n      limit: $limit\n      offset: $offset\n    ) {\n      label: fullName\n      value: id\n    }\n  }\n"]))),ei=(0,G.Ps)(P||(P=(0,C.Z)(["\n  query GetServiceSchedulesForSelect(\n    $q: String\n    $serviceId: Int\n    $entity: service_schedule_entity\n    $entityId: Int\n    $limit: Int = 50\n    $offset: Int = 0\n  ) {\n    items: ServiceSchedule(\n      where: {\n        name: { _ilike: $q }\n        serviceId: { _eq: $serviceId }\n        entity: { _eq: $entity }\n        entityId: { _eq: $entityId }\n      }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]))),ea=(0,G.Ps)(Z||(Z=(0,C.Z)(['\n  query GetPropertyById($id: Int!) {\n    item: Location_by_pk(id: $id) {\n      label: name\n      value: id\n      access\n      registeredAddress: Addresses(\n        where: { entity: { _eq: "Location" }, registered: { _eq: true } }\n      ) {\n        address: Address {\n          id\n          addressLine1\n          addressLine2\n          addressLine3\n          county\n          country: Country {\n            name\n          }\n          postCode\n          city\n        }\n      }\n    }\n  }\n'])))},71772:function(e,n,t){t.d(n,{P:function(){return w}});var r=t(59499),i=t(50029),a=t(4730),o=t(64687),s=t.n(o),c=t(67294),u=t(10367),d=t(66252),l=t(76301),y=t(78289),m=t(52019),q=t(49501),_=t(9270),$=t(62140),I=t(84043),f=t(77439),b=t(85893),p=["AddForm","accountId","area","assetCategoryId","control","entity","entityId","errors","id","isClearable","isDisabled","label","locationId","name","serviceId","taxonomyGroupType","customerId","customerRole","type","userId","invoiceThreshold","quoteThreshold"];function v(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function h(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?v(Object(t),!0).forEach(function(n){(0,r.Z)(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):v(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}var g=function(e,n){var t,r,i,a=!0;return(null===(t=e.errors[e.name])||void 0===t?void 0:t.message)!==(null===(r=n.errors[n.name])||void 0===r?void 0:r.message)&&(a=!1),["accountId","assetCategoryId","entity","entityId","locationId","serviceId","type","value","customerId","customerRole"].forEach(function(t){e[t]!==n[t]&&(a=!1)}),a},S=function(e){var n=e.accountId,t=e.area,r=e.assetCategoryId,i=e.entity,a=e.entityId,o=(e.hasRole,e.id),s=e.locationId,c=e.serviceId,u=e.taxonomyGroupType,d=e.customerId,y=e.customerRole,m=e.type,q=e.userId,_=e.invoiceThreshold,$=e.quoteThreshold,I=m;switch(y&&(I="".concat(m,"_").concat(y)),I){case"address":return{query:l.cz,variables:{entity:i,entityId:a}};case"asset":return{query:l.UH,variables:{categoryId:r,locationId:s}};case"assetBookable":return{query:l.UH,variables:{categoryId:r,locationId:s,bookable:"yes"}};case"assetCategory":return{query:l.nD,variables:{id:o}};case"assetSublocation":return{query:l.UH,variables:{category:"sublocation",adminId:n,locationId:s}};case"compliance":return{query:l.kU,variables:{locationId:s}};case"coverage":return{query:l.j$};case"customer":return{query:l.SW};case"job":return{query:l.Qn,variables:{locationId:s}};case"manager":return{query:l.he,variables:{accountId:n,userId:q}};case"thresholdManagers":return{query:l.Ak,variables:{accountId:n,userId:q,invoiceThreshold:_,quoteThreshold:$}};case"product":return{query:l.UH,variables:{category:"product",locationId:s}};case"property":return{query:l._d,variables:{where:{status:{_eq:"active"},Account_Locations:{accountId:{_eq:n}}}}};case"property_user":return{query:l._d,variables:{where:{status:{_eq:"active"},Account_Locations:{accountId:{_eq:n},Account:{type:{_eq:"customer"},Account_Users:{role:{_eq:"user"},userId:{_eq:d}}},User_Account_Locations:{Account_User:{userId:{_eq:d},accountId:{_eq:n}}}}}}};case"sensor":return{query:l.UH,variables:{category:"sensor",locationId:s}};case"service":return{query:l.kx};case"sla":return{query:l.t1,variables:{type:"priority",adminId:n}};case"sublocation":return{query:l.zR,variables:{locationId:s}};case"supplier":var f={type:{_eq:"supplier"}};return t&&(f.PostcodeAreas={PostcodeArea:{area:{_eq:t}},entity:{_eq:"Account"},status:{_eq:"active"}}),c&&(f.ServiceSchedule={status:{_eq:"active"},entity:{_eq:"Supplier"},serviceId:{_eq:c}},t&&(f.ServiceSchedule.PostcodeAreas={PostcodeArea:{area:{_eq:t}}})),{query:l.by,variables:{where:f}};case"user":return{query:l.yR,variables:{accountId:n}};case"usersForBookings":return{query:l.yR,variables:{accountId:q}};case"tenant":return{query:l.RJ};case"taxonomyGroup":return{query:l.Cj,variables:{type:u}};case"expenseCategory":return{query:l.Ve};default:return{query:l.qd}}},w=(0,c.memo)(function(e){var n,t=e.AddForm,r=e.accountId,o=e.area,u=e.assetCategoryId,l=e.control,v=e.entity,g=e.entityId,w=e.errors,T=e.id,k=e.isClearable,A=e.isDisabled,P=e.label,Z=e.locationId,C=e.name,G=e.serviceId,F=e.taxonomyGroupType,L=e.customerId,j=e.customerRole,U=e.type,R=e.userId,O=e.invoiceThreshold,E=e.quoteThreshold,N=(0,a.Z)(e,p),D=(0,d.x)(),B=(0,c.useState)(!1),M=B[0],H=B[1],z=(0,c.useState)(),J=z[0],V=z[1],W=(0,c.useState)(!1),Q=W[0],K=W[1],Y=(0,c.useContext)(y.Z),X=(0,c.useContext)(m.Z).hasRole,ee=(0,c.useState)(!1),en=ee[0],et=ee[1];(0,c.useEffect)(function(){return et(!1),K(!1),function(){}},[r,u,v,g,Z,G,U,L,j,R]);var er=(n=(0,i.Z)(s().mark(function e(){var n,t,i,a,c,d,l;return s().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!Q){e.next=3;break}return et(!0),e.abrupt("return",null);case 3:return H(!0),t=(n=S({accountId:r,area:o,assetCategoryId:u,entity:v,entityId:g,hasRole:X,id:T,locationId:Z,serviceId:G,taxonomyGroupType:F,customerId:L,customerRole:j,type:U,userId:R,invoiceThreshold:O,quoteThreshold:E})).query,a=void 0===(i=n.variables)?{}:i,e.next=7,D.query({query:t,variables:h({},a)});case 7:V((d=void 0===(d=e.sent.data)?{items:[]}:d).items),H(!1),K(!0),et(!0);case 15:case"end":return e.stop()}},e)})),function(){return n.apply(this,arguments)}),ei=function(){Y.show({content:(0,b.jsx)("div",{children:(0,b.jsx)(t,{})}),title:"Add form"})};return(0,b.jsx)(q.Z,{id:C,label:P,children:(0,b.jsxs)(_.Z,{children:[(0,b.jsx)($.Z,{md:t?11:12,children:(0,b.jsx)(I.Z,h({autoload:!1,blurInputOnSelect:!0,cacheOptions:!0,control:l,errors:w,isDisabled:A,isClearable:k,isLoading:M,menuIsOpen:en,options:J,onFocus:er,onBlur:function(){et(!1)},name:C,searchable:!0},N),N.defaultValue)}),t&&(0,b.jsx)($.Z,{md:1,children:(0,b.jsx)(x,{children:(0,b.jsx)(f.Z,{content:null,startIcon:"plus",size:"sm",onClick:ei})})})]})})},g),x=u.ZP.div.withConfig({displayName:"select__ButtonWrapper",componentId:"sc-v7qj9m-0"})(["position:relative;right:25px;top:2px;"]);w.defaultProps={isClearable:!0,label:"Account",name:"account",type:"account"}}}]);