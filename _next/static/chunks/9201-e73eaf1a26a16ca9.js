"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9201,1772],{15641:function(n,e,t){t.d(e,{z:function(){return r}});var i,o=t(71383),r=(0,t(75063).Ps)(i||(i=(0,o.Z)(["\n  fragment AccountFields on Account {\n    id\n    type\n    name\n    status\n    vatId\n  }\n"])))},18574:function(n,e,t){t.d(e,{F:function(){return S}});var i=t(59499),o=t(10166),r=t(50135),a=t(98456),s=t(16143),c=t(80482),u=t(23776),d=t(27812),m=t(4730),l=t(74061),p=t(6498),y=t(61730),b=t(75438),I=t(15861),f=t(67294),_=t(85893),g=["children"];function h(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,i)}return t}function v(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?h(Object(t),!0).forEach(function(e){(0,i.Z)(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):h(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}var $=(0,f.createContext)({}),q=(0,f.forwardRef)(function(n,e){var t=(0,f.useContext)($);return(0,_.jsx)("div",v(v({ref:e},n),t))}),A=(0,f.forwardRef)(function(n,e){var t=n.children,i=(0,m.Z)(n,g),o=[];t.forEach(function(n){o.push(n),o.push.apply(o,(0,d.Z)(n.children||[]))});var r,a,s=(0,p.u)(),c=(0,y.Z)(s.breakpoints.up("sm"),{noSsr:!0}),u=o.length,b=c?36:48,I=function(n){return n.hasOwnProperty("group")?48:b},h=(a=(0,f.useRef)(null),(0,f.useEffect)(function(){null!=a.current&&a.current.resetAfterIndex(0,!0)},[u]),a);return(0,_.jsx)("div",{ref:e,children:(0,_.jsx)($.Provider,{value:i,children:(0,_.jsx)(l.S_,{itemData:o,height:(u>8?8*b:o.map(I).reduce(function(n,e){return n+e},0))+16,width:"100%",ref:h,outerElementType:q,innerElementType:"ul",itemSize:function(n){return I(o[n])},overscanCount:5,itemCount:u,children:w})})})});function w(n){var e=n.data,t=n.index,i=n.style,o=e[t],r=v(v({},i),{},{top:i.top+8});return o.hasOwnProperty("group")?(0,_.jsx)(b.Z,{component:"div",style:r,children:o.group},o.key):(0,_.jsx)(I.Z,v(v({component:"li"},o[0]),{},{noWrap:!0,style:r,children:o[1].label}))}function j(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,i)}return t}function x(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?j(Object(t),!0).forEach(function(e){(0,i.Z)(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):j(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}var S=function(n){var e=n.label,t=n.loading,i=n.placeholder,o=n.error,s=n.helperText,c=n.inputProps;return(0,_.jsx)(T,x(x({},n),{},{disableListWrap:!0,PopperComponent:P,ListboxComponent:A,renderInput:function(n){return(0,_.jsx)(r.Z,x(x(x({},n),c),{},{error:o,helperText:s,label:e,placeholder:i,color:"secondary",variant:"standard",InputProps:x(x(x({},n.InputProps),(null==c?void 0:c.InputProps)||{}),{},{endAdornment:(0,_.jsxs)(_.Fragment,{children:[t?(0,_.jsx)(a.Z,{color:"inherit",size:20}):null,n.InputProps.endAdornment]})})}))},renderOption:function(n,e,t){return[n,e,t.index]},renderGroup:function(n){return n}}))};S.defaultProps={value:null,onChange:function(){},label:"",loading:!1,error:!1,onOpen:function(){},options:[],inputProps:{},withoutSelectIcon:!1};var P=(0,o.Z)(s.Z)((0,i.Z)({zIndex:"12000 !important"},"& .".concat(c.Z.listbox),{boxSizing:"border-box","& ul":{padding:0,margin:0}})),T=(0,o.Z)(u.Z)(function(n){return{"& .MuiAutocomplete-root":{cursor:"pointer"},"& .MuiAutocomplete-popper":{zIndex:"12000 "},"& .MuiAutocomplete-endAdornment":{"& .MuiButtonBase-root.MuiIconButton-root.MuiAutocomplete-popupIndicator":{"& .MuiSvgIcon-root":x({},n.withoutSelectIcon&&{display:"none"})}}}})},92034:function(n,e,t){t.d(e,{e:function(){return r}});var i=t(27812),o=t(33366),r=function(n,e){var t=(0,i.Z)(null==n?void 0:n.timings).sort(function(n,e){return e.id-n.id});return Array.isArray(e)?t.find(function(n){var t=n.status;return o.yW.find(function(n){return n.value===t&&!e.includes(t)})}):t.find(function(n){var t=n.status;return o.yW.find(function(n){return n.value===t&&t!==e})})}},38512:function(n,e,t){t.d(e,{$6:function(){return U},Ab:function(){return T},E6:function(){return v},FA:function(){return j},TY:function(){return P},Tw:function(){return R},bZ:function(){return O},dL:function(){return A},iU:function(){return Z},k7:function(){return S},mJ:function(){return $},qD:function(){return q},r2:function(){return x},uA:function(){return w},wU:function(){return C}});var i,o,r,a,s,c,u,d,m,l,p,y,b,I,f,_=t(71383),g=t(75063),h=t(4431),v=(0,g.Ps)(i||(i=(0,_.Z)(['\n  query GetJob($adminId: Int!, $number: String!) {\n    job: Job(where: { adminId: { _eq: $adminId }, number: { _eq: $number } }) {\n      id\n      issueReportedDescription\n      number\n      adminId\n      title\n      description\n      reference\n      access\n      costCategory\n      pricing\n      timing\n      timingStart\n      timingEnd\n      timingNormalHours\n      paymentMethod\n      customerSpendThreshold\n      time\n      amount\n      supplierLabourAmount\n      supplierMaterialsAmount\n      source\n      discount\n      timingStatus\n      correctDuration\n      correctStart\n      correctEnd\n      reportPassFail\n      reportPassFailTitle\n      requireReportRecommendations\n      estimatedDuration\n      estimatedDurationUnit\n      anyTimeOption\n      hourStart\n      hourEnd\n      onSiteTimingEnd\n      issueReportedDescription\n      permitsLinks\n      relatedLinks\n      supplierVatTotal: supplierFinances(path: "amountInfo.vatTotal")\n\n      assetCategory: AssetCategory {\n        name\n        id\n      }\n      assets: Assets {\n        id\n        status\n        jobId\n        asset: Asset {\n          id\n          name\n        }\n      }\n      issueTypes: Taxonomy(\n        where: {\n          entity: { _eq: "Job" }\n          Taxonomy: { status: { _eq: "active" }, type: { _eq: "issueType" } }\n        }\n      ) {\n        id\n        issue: Taxonomy {\n          id\n          name\n        }\n      }\n      tags: Taxonomy(\n        where: {\n          entity: { _eq: "Job" }\n          Taxonomy: { status: { _eq: "active" }, type: { _eq: "tags" } }\n        }\n      ) {\n        id\n        tag: Taxonomy {\n          id\n          name\n          meta\n          type\n        }\n      }\n      ppmInvoices: AccountEntries {\n        Invoices {\n          id\n          invoiceNumber\n          invoiceType\n          meta\n          createdAt\n          accountEntry: AccountEntry {\n            id\n          }\n        }\n      }\n      invoices: Invoices(order_by: { createdAt: desc }) {\n        id\n        invoiceNumber\n        invoiceType\n        createdAt\n        amounts\n        accountEntry: AccountEntry {\n          id\n          meta\n        }\n        reconciledAmount: AccountEntry {\n          reconciliations: InvoiceReconciliations_aggregate {\n            aggregate {\n              sum {\n                amount\n              }\n            }\n          }\n        }\n      }\n      customer: Customer {\n        meta\n      }\n      supplierDeposit\n      rebate\n      status\n      workStatus\n      supplierNotes\n      ppm\n      quoted\n      quoteNumber\n      quoteDue\n      quoteDueSupplier\n      scheduledAt\n      createdAt\n      updatedAt\n      supplierId\n      customerId\n      customerUserId\n      locationId\n      managerId\n      parentId\n      serviceId\n      slaId\n      siteVisitStart\n      siteVisitEnd\n      siteVisitWeekends\n      tenantId\n      quoteCharge\n      quoteChargeAmount\n      jobScheduleId\n      type\n      meta\n      customerFinances\n      compliances: Compliances(where: { entity: { _eq: "Job" } }) {\n        id\n        compliance: Compliance {\n          id\n          name\n        }\n      }\n\n      admin: Admin {\n        id\n        name\n        meta\n        bankAccounts: BankAccounts {\n          id\n          bank\n          stripeId\n          accountNumber\n          routingNumber\n          bic\n          iban\n          status\n          default\n          createdAt\n          meta\n        }\n        addresses: Addresses {\n          id\n          registered\n          operating\n          trading\n          invoice\n          status\n          createdAt\n          address: Address {\n            id\n            name\n            addressLine1\n            addressLine2\n            addressLine3\n            city\n            county\n            geo\n            postCode\n            country: Country {\n              id\n              name\n            }\n          }\n        }\n      }\n      customer: Customer {\n        id\n        companyNumber\n        createdAt\n        name\n        status\n        type\n        updatedAt\n        website\n        clientType\n        managerId\n        vatId\n        meta\n        media: Media {\n          id\n          medium: Medium {\n            id\n            category\n            filename\n            meta\n            type\n          }\n        }\n        manager: Manager {\n          id\n          fullName\n        }\n        financial: Financial {\n          id\n          amountOutstanding\n          approvalThreshold\n          arrangementFee\n          createdAt\n          creditLimit\n          creditRating\n          defaultPaymentMethod\n          invoicing\n          serviceRate\n          spendThreshold\n          stripeId\n          totalRevenue\n          unpaidInvoices\n        }\n        slas: SLAs(where: { entity: { _eq: "Account" } }) {\n          id\n          entity\n          entityId\n          onSite\n          onSiteUnit\n          jobReport\n          jobReportUnit\n          completion\n          completionUnit\n          notes\n          inUse\n          normalRate\n          oohRate\n          premiumRate\n          minimumInterval\n          minimumLength\n          slaId\n          sla: SLA {\n            id\n            name\n            notes\n            normalRate\n            oohRate\n            premiumRate\n            onSite\n            onSiteUnit\n            jobReport\n            jobReportUnit\n            completion\n            completionUnit\n            minimumInterval\n            minimumLength\n          }\n        }\n        services: Services(where: { entity: { _eq: "Account" } }) {\n          id\n          dayRate\n          dayRateOOH\n          dayRatePremium\n          hourRate\n          hourRateOOH\n          hourRatePremium\n          meta\n          minimumInterval\n          minimumLength\n          callOutHourRate\n          callOutHourRateOOH\n          callOutHourRatePremium\n          notes\n          delivery\n          createdAt\n          updatedAt\n          entity\n          entityId\n          serviceId\n        }\n        addresses: Addresses(where: { entity: { _eq: "Account" } }) {\n          ...AddressEntityFields\n          address: Address {\n            ...AddressFields\n            country: Country {\n              id\n              name\n            }\n          }\n        }\n        media: Media {\n          id\n          medium: Medium {\n            id\n            category\n            filename\n            meta\n            type\n          }\n        }\n      }\n      customerUser: CustomerUser {\n        id\n        name: nameFirst\n        nameFirst\n        nameLast\n        phone\n        status\n        email\n        createdAt\n        fullName\n        meta\n        accounts: Account_Users {\n          id\n          role\n          position\n          isContact\n          status\n          account: Account {\n            id\n            name\n            type\n          }\n        }\n      }\n      expenses: Expenses {\n        id\n        amount\n        description\n        markup\n        total\n        unit\n        vat\n        paid\n      }\n      sublocation: Sublocation {\n        id\n        name\n      }\n      location: Location {\n        id\n        access\n        createdAt\n        name\n        contactUserId\n        permitsRequired\n        addresses: Addresses(where: { entity: { _eq: "Location" } }) {\n          ...AddressEntityFields\n          address: Address {\n            ...AddressFields\n            countryId\n            country: Country {\n              id\n              name\n              code\n            }\n          }\n        }\n        slas: SLAs(where: { entity: { _eq: "Location" } }) {\n          id\n          entity\n          entityId\n          onSite\n          onSiteUnit\n          jobReport\n          jobReportUnit\n          completion\n          completionUnit\n          notes\n          inUse\n          normalRate\n          oohRate\n          premiumRate\n          minimumInterval\n          minimumLength\n          slaId\n          sla: SLA {\n            id\n            name\n            notes\n            normalRate\n            oohRate\n            premiumRate\n            onSite\n            onSiteUnit\n            jobReport\n            jobReportUnit\n            completion\n            completionUnit\n            minimumInterval\n            minimumLength\n          }\n        }\n        services: Services(where: { entity: { _eq: "Location" } }) {\n          id\n          dayRate\n          dayRateOOH\n          dayRatePremium\n          hourRate\n          hourRateOOH\n          hourRatePremium\n          meta\n          minimumInterval\n          minimumLength\n          callOutHourRate\n          callOutHourRateOOH\n          callOutHourRatePremium\n          notes\n          delivery\n          createdAt\n          updatedAt\n          entity\n          entityId\n          serviceId\n        }\n      }\n      financeLogs: JobFinanceLogs(order_by: { createdAt: desc }) {\n        id\n        type\n        value\n        difference\n        createdAt\n      }\n      manager: Manager {\n        id\n        name: nameFirst\n        nameFirst\n        nameLast\n        phone\n        status\n        email\n        createdAt\n        fullName\n        accounts: Account_Users {\n          id\n          role\n          position\n          isContact\n          status\n          account: Account {\n            id\n            name\n            type\n          }\n        }\n      }\n      quotations: SupplierQuotes(\n        where: { status: { _neq: "cancelled" } }\n        order_by: { quoteNumber: asc }\n      ) {\n        id\n        createdAt\n        jobId\n        methodStatement\n        notes\n        quoteNumber\n        startDate\n        rebate\n        recommended\n        status\n        totalDuration\n        totalDurationUnit\n        meta\n        updatedAt\n        siteVisitAt\n        type\n        lineItems: SupplierQuoteLineItems {\n          id\n          description\n          item\n          qty\n          qtyUnit\n          quoteId\n          supplierTotal\n          total\n          type\n          unitRate\n        }\n        supplier: Supplier {\n          id\n          companyNumber\n          createdAt\n          name\n          status\n          type\n          updatedAt\n          website\n          clientType\n          managerId\n          vatId\n          meta\n          accountUsers: Account_Users {\n            user: User {\n              id\n              fullName\n              nameFirst\n              nameLast\n              phone\n              email\n              devices: UserDevices(where: { status: { _eq: "active" } }) {\n                id\n                playerId\n              }\n            }\n          }\n          media: Media {\n            id\n            medium: Medium {\n              id\n              category\n              filename\n              meta\n              type\n            }\n          }\n          manager: Manager {\n            id\n            fullName\n          }\n        }\n        media: Media(where: { entity: { _eq: "Quotation" } }) {\n          id\n        }\n      }\n      report: JobReport {\n        id\n        completion\n        meta\n        notes\n        timing\n        passFailStatus\n        recommendations\n        comments\n        createdAt\n        updatedAt\n      }\n      service: Service {\n        id\n        name\n        countryId\n        currencyId\n        customerDayRate\n        customerDayRateOOH\n        customerDayRatePremium\n        customerHourRate\n        customerHourRateOOH\n        customerHourRatePremium\n        supplierDayRate\n        supplierDayRateOOH\n        supplierDayRatePremium\n        supplierHourRate\n        supplierHourRateOOH\n        supplierHourRatePremium\n        minimumInterval\n        minimumLength\n      }\n      sla: SLA {\n        id\n        name\n        notes\n        normalRate\n        oohRate\n        premiumRate\n        onSite\n        onSiteUnit\n        jobReport\n        jobReportUnit\n        completion\n        completionUnit\n        minimumInterval\n        minimumLength\n      }\n      media: Media {\n        id\n        item: Medium {\n          id\n          name\n          type\n          filename\n          category\n          meta\n        }\n      }\n      supplier: Supplier {\n        id\n        companyNumber\n        createdAt\n        name\n        status\n        type\n        updatedAt\n        website\n        clientType\n        managerId\n        vatId\n        meta\n        media: Media {\n          id\n          medium: Medium {\n            id\n            category\n            filename\n            meta\n            type\n          }\n        }\n        manager: Manager {\n          id\n          fullName\n        }\n        contactUsers: Account_Users(where: { isContact: { _eq: true } }) {\n          role\n          position\n          isContact\n          lastSignInAt\n          userId\n          user: User {\n            id\n            name: nameFirst\n            nameFirst\n            nameLast\n            phone\n            status\n            email\n            createdAt\n            fullName\n            accounts: Account_Users {\n              id\n              role\n              position\n              isContact\n              status\n              account: Account {\n                id\n                name\n                type\n              }\n            }\n          }\n        }\n        addresses: Addresses(where: { entity: { _eq: "Account" } }) {\n          ...AddressEntityFields\n          address: Address {\n            ...AddressFields\n            country: Country {\n              id\n              name\n            }\n          }\n        }\n        services: Services(where: { entity: { _eq: "Account" } }) {\n          id\n          dayRate\n          dayRateOOH\n          dayRatePremium\n          hourRate\n          hourRateOOH\n          hourRatePremium\n          meta\n          minimumInterval\n          minimumLength\n          callOutHourRate\n          callOutHourRateOOH\n          callOutHourRatePremium\n          notes\n          delivery\n          createdAt\n          updatedAt\n          entity\n          entityId\n          serviceId\n        }\n      }\n      supplierUser: SupplierUser {\n        id\n        meta\n        name: nameFirst\n        nameFirst\n        nameLast\n        phone\n        status\n        email\n        createdAt\n        fullName\n        accounts: Account_Users {\n          id\n          role\n          position\n          isContact\n          status\n          account: Account {\n            id\n            name\n            type\n          }\n        }\n      }\n      supplierOffers: SupplierOffers {\n        id\n        status\n        rate\n        dayRate\n        meta\n        notes\n        statusLog\n        account: Supplier {\n          id\n          companyNumber\n          createdAt\n          name\n          status\n          type\n          updatedAt\n          website\n          clientType\n          managerId\n          vatId\n          meta\n          media: Media {\n            id\n            medium: Medium {\n              id\n              category\n              filename\n              meta\n              type\n            }\n          }\n          manager: Manager {\n            id\n            fullName\n          }\n        }\n      }\n      tenant: Tenant {\n        id\n        companyNumber\n        createdAt\n        name\n        status\n        type\n        updatedAt\n        website\n        clientType\n        managerId\n        vatId\n        meta\n        media: Media {\n          id\n          medium: Medium {\n            id\n            category\n            filename\n            meta\n            type\n          }\n        }\n        manager: Manager {\n          id\n          fullName\n        }\n      }\n      tenantUser: TenantUser {\n        id\n        fullName\n        nameFirst\n        nameLast\n        email\n        phone\n      }\n      timings: JobTimings(order_by: { id: desc }) {\n        id\n        status\n        notes\n        meta\n        quoteId\n        createdAt\n        user: User {\n          id\n          fullName\n        }\n      }\n      shortJobDesc: Taxonomy(where: { Taxonomy: { type: { _eq: "jobTags" } } }) {\n        id\n        taxonomyId\n        comments\n        taxonomy: Taxonomy {\n          name\n          meta\n        }\n      }\n      answers: Taxonomy(\n        where: { Taxonomy: { type: { _eq: "jobQuestion" } } }\n        order_by: { taxonomyId: asc }\n      ) {\n        id\n        taxonomyId\n        comments\n        taxonomy: Taxonomy {\n          name\n        }\n      }\n      costCategoryTaxonomy: CostCategory {\n        id\n        name\n      }\n      parentJob: ParentJob {\n        createdAt\n        id\n        number\n        reference\n        status\n        title\n        type\n      }\n      childJobs: Jobs {\n        createdAt\n        id\n        number\n        reference\n        status\n        title\n        type\n      }\n      compliances: Compliances(where: { entity: { _eq: "Job" } }) {\n        id\n      }\n    }\n  }\n  ',"\n  ","\n"])),h.WW,h.MR),$=(0,g.Ps)(o||(o=(0,_.Z)(["\n  mutation MyMutation($objects: [CreateJobInput]!, $adminId: Int!) {\n    createJob(adminId: $adminId, objects: $objects) {\n      data\n    }\n  }\n"]))),q=(0,g.Ps)(r||(r=(0,_.Z)(["\n  mutation UpdateJob($id: Int!, $changes: Job_set_input) {\n    update_Job_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n      status\n    }\n  }\n"]))),A=(0,g.Ps)(a||(a=(0,_.Z)(['\n  query GetIssueTypesForSelect {\n    issueTypes: Taxonomy(where: { type: { _eq: "issueType" } }) {\n      value: id\n      label: name\n    }\n  }\n']))),w=(0,g.Ps)(s||(s=(0,_.Z)(['\n  mutation UpdateJob(\n    $jobId: Int!\n    $changes: Job_set_input\n    $deletedAssetIds: [Int!]\n    $assets: [Asset_Entity_insert_input!]!\n    $questions: [Taxonomy_Entity_insert_input!]!\n    $hasQuestions: Boolean!\n    $compliances: [Compliance_Entity_insert_input!]!\n    $media: [Media_Entity_insert_input!]!\n  ) {\n    update_Job_by_pk(pk_columns: { id: $jobId }, _set: $changes) {\n      id\n      status\n      number\n    }\n    insert_Media_Entity(objects: $media) {\n      returning {\n        id\n      }\n    }\n    insert_Asset_Entity(objects: $assets) {\n      returning {\n        id\n      }\n    }\n    delete_Asset_Entity(where: { id: { _in: $deletedAssetIds } }) {\n      returning {\n        id\n      }\n    }\n    delete_Taxonomy_Entity(where: { entityId: { _eq: $jobId }, entity: { _eq: "Job" } }) {\n      returning {\n        id\n      }\n    }\n    insert_Taxonomy_Entity(objects: $questions) @include(if: $hasQuestions) {\n      returning {\n        id\n      }\n    }\n    delete_Compliance_Entity(where: { entityId: { _eq: $jobId }, entity: { _eq: "Job" } }) {\n      returning {\n        id\n      }\n    }\n    insert_Compliance_Entity(objects: $compliances) {\n      returning {\n        id\n      }\n    }\n  }\n']))),j=(0,g.Ps)(c||(c=(0,_.Z)(['\n  mutation UpdateJob(\n    $jobId: Int!\n    $originatorEmail: String!\n    $originatorChanges: User_set_input!\n    $changes: Job_set_input\n    $questions: [Taxonomy_Entity_insert_input!]!\n    $hasQuestions: Boolean!\n  ) {\n    update_User(where: { email: { _eq: $originatorEmail } }, _set: $originatorChanges) {\n      returning {\n        id\n      }\n    }\n\n    update_Job_by_pk(pk_columns: { id: $jobId }, _set: $changes) {\n      id\n      status\n    }\n    delete_Taxonomy_Entity(where: { entityId: { _eq: $jobId }, entity: { _eq: "Job" } }) {\n      returning {\n        id\n      }\n    }\n    insert_Taxonomy_Entity(objects: $questions) @include(if: $hasQuestions) {\n      returning {\n        id\n      }\n    }\n  }\n']))),x=(0,g.Ps)(u||(u=(0,_.Z)(["\n  mutation AddJob($objects: [JobTiming_insert_input!]!) {\n    insert_JobTiming(objects: $objects) {\n      returning {\n        id\n        status\n        notes\n        createdAt\n      }\n    }\n  }\n"]))),S=(0,g.Ps)(d||(d=(0,_.Z)(["\n  mutation DeleteJobTiming($id: Int!, $quoteId: Int, $status: String) {\n    delete_JobTiming(\n      where: { jobId: { _eq: $id }, quoteId: { _eq: $quoteId }, status: { _eq: $status } }\n    ) {\n      returning {\n        jobId\n        status\n      }\n    }\n  }\n"]))),P=(0,g.Ps)(m||(m=(0,_.Z)(['\n  query GetJobPredefined(\n    $accountId: Int!\n    $locationId: Int!\n    $parentId: Int!\n    $assetId: Int!\n    $includeAccount: Boolean!\n    $includeLocation: Boolean!\n    $includeParentJob: Boolean!\n    $includeAsset: Boolean!\n  ) {\n    parentJob: Job_by_pk(id: $parentId) @include(if: $includeParentJob) {\n      id\n      title\n      description\n      reference\n      access\n      source\n      slaId\n      paymentMethod\n      pricing\n      customerSpendThreshold\n      amount\n      supplierLabourAmount\n      supplierMaterialsAmount\n      admin: Admin {\n        id\n        name\n      }\n      customer: Customer {\n        id\n        companyNumber\n        createdAt\n        name\n        status\n        type\n        updatedAt\n        website\n        clientType\n        managerId\n        vatId\n        meta\n        media: Media {\n          id\n          medium: Medium {\n            id\n            category\n            filename\n            meta\n            type\n          }\n        }\n        manager: Manager {\n          id\n          fullName\n        }\n      }\n      customerUser: CustomerUser {\n        id\n        name: nameFirst\n        nameFirst\n        nameLast\n        phone\n        status\n        email\n        createdAt\n        fullName\n        accounts: Account_Users {\n          id\n          role\n          position\n          isContact\n          status\n          account: Account {\n            id\n            name\n            type\n          }\n        }\n      }\n      location: Location {\n        id\n        access\n        createdAt\n        name\n        contactUserId\n      }\n      sublocation: Sublocation {\n        id\n        name\n      }\n      assets: Assets {\n        id\n        status\n        jobId\n        asset: Asset {\n          name\n          id\n        }\n      }\n      assetCategory: AssetCategory {\n        name\n        id\n      }\n      shortJobDesc: Taxonomy(where: { Taxonomy: { type: { _eq: "jobTags" } } }) {\n        id\n        taxonomyId\n        comments\n        taxonomy: Taxonomy {\n          name\n          meta\n        }\n      }\n      answers: Taxonomy(\n        where: { Taxonomy: { type: { _eq: "jobQuestion" } } }\n        order_by: { taxonomyId: asc }\n      ) {\n        id\n        taxonomyId\n        comments\n        taxonomy: Taxonomy {\n          name\n        }\n      }\n      costCategoryTaxonomy: CostCategory {\n        id\n        name\n      }\n      childJobs: Jobs {\n        createdAt\n        id\n        reference\n        status\n        title\n      }\n      compliances: Compliances(where: { entity: { _eq: "Job" } }) {\n        id\n        compliance: Compliance {\n          id\n          name\n        }\n      }\n      manager: Manager {\n        id\n        name: nameFirst\n        nameFirst\n        nameLast\n        phone\n        status\n        email\n        createdAt\n        fullName\n        accounts: Account_Users {\n          id\n          role\n          position\n          isContact\n          status\n          account: Account {\n            id\n            name\n            type\n          }\n        }\n      }\n      service: Service {\n        id\n        name\n        countryId\n        currencyId\n        customerDayRate\n        customerDayRateOOH\n        customerDayRatePremium\n        customerHourRate\n        customerHourRateOOH\n        customerHourRatePremium\n        supplierDayRate\n        supplierDayRateOOH\n        supplierDayRatePremium\n        supplierHourRate\n        supplierHourRateOOH\n        supplierHourRatePremium\n        minimumInterval\n        minimumLength\n      }\n    }\n    customer: Account_by_pk(id: $accountId) @include(if: $includeAccount) {\n      id\n      name\n    }\n    location: Location_by_pk(id: $locationId) @include(if: $includeLocation) {\n      id\n      name\n      customerAssociations: Account_Locations(where: { Account: { type: { _eq: "customer" } } }) {\n        customer: Account {\n          id\n          name\n        }\n      }\n    }\n    asset: Asset_by_pk(id: $assetId) @include(if: $includeAsset) {\n      id\n      name\n      Category {\n        name\n        id\n      }\n    }\n  }\n']))),T=(0,g.Ps)(l||(l=(0,_.Z)(['\n  query GetSLAsForJobManage($customerId: Int!, $locationId: Int!) {\n    customerSlas: SLA_Entity(\n      where: { entityId: { _eq: $customerId }, entity: { _eq: "Account" } }\n    ) {\n      sla: SLA {\n        name\n      }\n      id\n      inUse\n      onSite\n      onSiteUnit\n      quoteReturned\n      quoteReturnedUnit\n      createdAt\n      updatedAt\n      notes\n      slaId\n    }\n    locationSlas: SLA_Entity(\n      where: { entityId: { _eq: $locationId }, entity: { _eq: "Location" } }\n    ) {\n      sla: SLA {\n        name\n      }\n      id\n      inUse\n      onSite\n      onSiteUnit\n      quoteReturned\n      quoteReturnedUnit\n      createdAt\n      updatedAt\n      notes\n      slaId\n      entity\n    }\n    slas: SLA(where: { status: { _eq: "active" } }, order_by: { name: asc }) {\n      id\n      label: name\n      notes\n      onSite\n      onSiteUnit\n      quoteReturned\n      quoteReturnedUnit\n      createdAt\n      updatedAt\n      type\n      subtype\n    }\n  }\n']))),O=(0,g.Ps)(p||(p=(0,_.Z)(["\n  query GetJobFinanceLogs($jobId: Int!) {\n    logs: JobFinanceLog(where: { jobId: { _eq: $jobId } }, order_by: { createdAt: desc }) {\n      id\n      type\n      value\n      difference\n      createdAt\n      meta\n    }\n  }\n"]))),R=(0,g.Ps)(y||(y=(0,_.Z)(["\n  mutation AddJobFinanceLog($objects: [JobFinanceLog_insert_input!]!) {\n    insert_JobFinanceLog(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"]))),C=(0,g.Ps)(b||(b=(0,_.Z)(["\n  mutation AddJob(\n    $timing: [JobTiming_insert_input!]!\n    $financeLog: [JobFinanceLog_insert_input!]!\n    $hasFinanceLog: Boolean!\n    $jobId: Int!\n    $jobChange: Job_set_input\n  ) {\n    insert_JobTiming(objects: $timing) {\n      returning {\n        id\n        status\n        notes\n        createdAt\n      }\n    }\n    insert_JobFinanceLog(objects: $financeLog) @include(if: $hasFinanceLog) {\n      returning {\n        id\n      }\n    }\n    update_Job_by_pk(pk_columns: { id: $jobId }, _set: $jobChange) @include(if: $hasFinanceLog) {\n      id\n      status\n    }\n  }\n"]))),Z=(0,g.Ps)(I||(I=(0,_.Z)(["\n  mutation calculateJobFinance(\n    $jobId: Int\n    $invoiceType: String\n    $customerId: Int\n    $scheduleId: Int\n    $locationId: Int\n  ) {\n    calculateJobFinance(\n      jobId: $jobId\n      invoiceType: $invoiceType\n      customerId: $customerId\n      scheduleId: $scheduleId\n      locationId: $locationId\n    ) {\n      data\n    }\n  }\n"]))),U=(0,g.Ps)(f||(f=(0,_.Z)(["\n  subscription GetJobTimings($adminId: Int!, $number: String!) {\n    timings: JobTiming(\n      where: { Job: { adminId: { _eq: $adminId }, number: { _eq: $number } } }\n      order_by: { id: desc }\n    ) {\n      id\n      status\n      notes\n      meta\n      quoteId\n      createdAt\n      user: User {\n        id\n        fullName\n      }\n    }\n  }\n"])))},59636:function(n,e,t){t.d(e,{H_:function(){return _},Vw:function(){return $},aL:function(){return b},iU:function(){return q},pf:function(){return I},sW:function(){return v},wd:function(){return f},xY:function(){return g},yT:function(){return h}});var i,o,r,a,s,c,u,d,m,l=t(71383),p=t(75063),y=t(4431),b=(0,p.Ps)(i||(i=(0,l.Z)(["\n  fragment JobFields on Job {\n    access\n    issueReportedDescription\n    adminId\n    costCategory\n    createdAt\n    description\n    id\n    meta\n    pricing\n    reference\n    scheduledAt\n    status\n    supplierLabourAmount\n    supplierMaterialsAmount\n    timing\n    timingEnd\n    timingNormalHours\n    timingStart\n    title\n    type\n    siteVisitStart\n    siteVisitEnd\n    siteVisitWeekends\n    amount\n    number\n    quoted\n    timingStatus\n    correctDuration\n    correctStart\n    correctEnd\n  }\n"]))),I=(0,p.Ps)(o||(o=(0,l.Z)(["\n  fragment JobQuoteFields on Job {\n    quoted\n    quoteNumber\n    quoteDue\n    quoteDueSupplier\n    quoteCharge\n  }\n"]))),f=(0,p.Ps)(r||(r=(0,l.Z)(["\n  fragment JobAdminFields on Job {\n    supplierId\n    supplierUserId\n  }\n"]))),_=(0,p.Ps)(a||(a=(0,l.Z)(["\n  fragment JobSupplierFields on Job {\n    supplierId\n    supplierUserId\n  }\n"]))),g=(0,p.Ps)(s||(s=(0,l.Z)(["\n  mutation UpdateJob(\n    $id: Int!\n    $changes: Job_set_input\n    $timing: [JobTiming_insert_input!]!\n    $_append: Job_append_input = {}\n  ) {\n    update_Job_by_pk(pk_columns: { id: $id }, _set: $changes, _append: $_append) {\n      id\n    }\n    insert_JobTiming(objects: $timing) {\n      returning {\n        id\n        status\n        createdAt\n      }\n    }\n  }\n"]))),h=(0,p.Ps)(c||(c=(0,l.Z)(["\n  mutation InsertJobTiming($timing: [JobTiming_insert_input!]!) {\n    insert_JobTiming(objects: $timing) {\n      returning {\n        id\n        status\n        createdAt\n      }\n    }\n  }\n"]))),v=(0,p.Ps)(u||(u=(0,l.Z)(['\n  query GetJobHistory(\n    $jobId: Int\n    $locationId: Int!\n    $limit: Int\n    $offset: Int\n    $serviceId: Int\n    $startDate: timestamptz!\n  ) {\n    jobs: Job(\n      limit: $limit\n      offset: $offset\n      order_by: { createdAt: desc }\n      where: {\n        createdAt: { _gte: $startDate }\n        id: { _neq: $jobId }\n        locationId: { _eq: $locationId }\n        serviceId: { _eq: $serviceId }\n        status: { _nin: ["pending", "raised", "offered", "accepted", "inProgress"] }\n      }\n    ) {\n      id\n      title\n      status\n      scheduledAt\n      createdAt\n      meta\n      service: Service {\n        id\n        name\n      }\n      shortJobDesc: Taxonomy(where: { Taxonomy: { type: { _eq: "jobTags" } } }) {\n        id\n        taxonomyId\n        comments\n        taxonomy: Taxonomy {\n          name\n        }\n      }\n    }\n    meta: Job_aggregate(\n      where: {\n        createdAt: { _gte: $startDate }\n        id: { _neq: $jobId }\n        locationId: { _eq: $locationId }\n        serviceId: { _eq: $serviceId }\n        status: { _nin: ["pending", "raised", "offered", "accepted", "inProgress"] }\n      }\n    ) {\n      aggregate {\n        totalCount: count\n      }\n    }\n  }\n']))),$=(0,p.Ps)(d||(d=(0,l.Z)(['\n  query GetJob($jobId: Int!) {\n    job: Job_by_pk(id: $jobId) {\n      access\n      costCategory\n      customerSpendThreshold\n      description\n      supplierLabourAmount\n      supplierMaterialsAmount\n      quoteDue\n      quoteNumber\n      id\n      number\n      meta\n      paymentMethod\n      reference\n      status\n      title\n      type\n      quoted\n      invoices: Invoices(order_by: { createdAt: desc }) {\n        id\n        invoiceNumber\n      }\n      quotations: SupplierQuotes {\n        id\n        quoteNumber\n        status\n        lineItems: SupplierQuoteLineItems {\n          id\n          description\n          item\n          qty\n          qtyUnit\n          quoteId\n          total\n          type\n          unitRate\n          supplierTotal\n        }\n        supplier: Supplier {\n          id\n          type\n          name\n          accountUsers: Account_Users {\n            user: User {\n              id\n              fullName\n              nameFirst\n              nameLast\n              phone\n              email\n              devices: UserDevices(where: { status: { _eq: "active" } }) {\n                id\n                playerId\n              }\n            }\n          }\n        }\n      }\n      admin: Admin {\n        id\n        name\n      }\n      service: Service {\n        id\n        name\n      }\n      manager: Manager {\n        id\n        nameFirst\n        nameLast\n      }\n      customer: Customer {\n        id\n        name\n        website\n        slas: SLAs(where: { entity: { _eq: "Account" } }) {\n          id\n          entity\n          entityId\n          onSite\n          onSiteUnit\n          jobReport\n          jobReportUnit\n          completion\n          completionUnit\n          notes\n          inUse\n          normalRate\n          oohRate\n          premiumRate\n          minimumInterval\n          minimumLength\n          slaId\n          sla: SLA {\n            id\n            name\n            notes\n            normalRate\n            oohRate\n            premiumRate\n            onSite\n            onSiteUnit\n            jobReport\n            jobReportUnit\n            completion\n            completionUnit\n            minimumInterval\n            minimumLength\n          }\n        }\n      }\n      customerUser: CustomerUser {\n        id\n        nameFirst\n        nameLast\n        fullName\n        email\n        phone\n      }\n      supplier: Supplier {\n        id\n        name\n        contactUsers: Account_Users(where: { isContact: { _eq: true } }) {\n          id\n          role\n          position\n          isContact\n          lastSignInAt\n          userId\n          user: User {\n            id\n            fullName\n            nameFirst\n            nameLast\n            email\n            phone\n          }\n        }\n      }\n      supplierUser: SupplierUser {\n        id\n        fullName\n        nameFirst\n        nameLast\n        email\n        phone\n      }\n      location: Location {\n        id\n        name\n        addresses: Addresses(where: { entity: { _eq: "Location" } }) {\n          ...AddressEntityFields\n          address: Address {\n            ...AddressFields\n            country: Country {\n              id\n              name\n            }\n          }\n        }\n        slas: SLAs(where: { entity: { _eq: "Location" } }) {\n          id\n          entity\n          entityId\n          onSite\n          onSiteUnit\n          jobReport\n          jobReportUnit\n          completion\n          completionUnit\n          notes\n          inUse\n          normalRate\n          oohRate\n          premiumRate\n          minimumInterval\n          minimumLength\n          slaId\n          sla: SLA {\n            id\n            name\n            notes\n            normalRate\n            oohRate\n            premiumRate\n            onSite\n            onSiteUnit\n            jobReport\n            jobReportUnit\n            completion\n            completionUnit\n            minimumInterval\n            minimumLength\n          }\n        }\n      }\n      sla: SLA {\n        id\n        name\n        notes\n        normalRate\n        oohRate\n        premiumRate\n        onSite\n        onSiteUnit\n        jobReport\n        jobReportUnit\n        completion\n        completionUnit\n        minimumInterval\n        minimumLength\n      }\n      costCategoryTaxonomy: CostCategory {\n        id\n        name\n      }\n      shortJobDesc: Taxonomy(where: { Taxonomy: { type: { _eq: "jobTags" } } }) {\n        id\n        taxonomyId\n        comments\n        taxonomy: Taxonomy {\n          name\n        }\n      }\n    }\n  }\n  ',"\n  ","\n"])),y.WW,y.MR),q=(0,p.Ps)(m||(m=(0,l.Z)(["\n  mutation calculateJobFinance($jobId: Int!, $invoiceType: String!) {\n    calculateJobFinance(jobId: $jobId, invoiceType: $invoiceType) {\n      data\n    }\n  }\n"])))},73073:function(n,e,t){t.d(e,{G:function(){return k}});var i=t(59499),o=t(6812),r=t(12603),a=t(32836),s=t(4788),c=t(94784),u=t(85011),d=t(40826),m=t(85893),l=function(n,e){var t=function(){return(0,m.jsx)(d.Z,{context:"success",icon:"check",size:"sm",title:"Yes"})},i=function(){return(0,m.jsx)(d.Z,{context:"warning",icon:"times",size:"sm",title:"No"})},o=function(){return(0,m.jsx)(d.Z,{context:"dark",icon:"minus",size:"sm",title:"Unavailable"})};return"image"===n?null!=e&&e.thumbnails&&null!=e&&e.thumbnails.length?t:i:o},p=t(42846),y=t(72936),b=t(21023),I=t(5616),f=t(86532),_=t(38895),g=t(15861),h=t(22797),v=t(26447),$=t(11057),q=t(58886),A=t(90948),w=t(70872),j=t(67294),x=t(77314),S=t(42850);function P(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,i)}return t}var T=(0,S.bH)(x.ZP),O=function(n){var e=n.images,t=n.showPagination,o=n.height,r=(0,j.useState)(0),a=r[0],s=r[1],c=function(n){s(n)};return(0,m.jsxs)(v.Z,{width:"100%",alignItems:"center",children:[(0,m.jsx)(T,{index:a,onChangeIndex:c,enableMouseEvents:!0,interval:1e4,children:e.map(function(n){return(0,m.jsx)(I.Z,{component:"img",sx:{height:o,display:"block",overflow:"hidden",width:"100%",objectFit:"cover"},src:n.filename,alt:n.caption},n.caption)})}),t&&e.length>1&&(0,m.jsx)(R,{page:a+1,count:e.length,onChange:function(n,e){return c(e-1)},variant:"outlined",shape:"rounded",renderItem:function(n){return(0,m.jsx)(q.Z,function(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?P(Object(t),!0).forEach(function(e){(0,i.Z)(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):P(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}({slots:{previous:function(){return"Previous"},next:function(){return"Next"}}},n))}})]})};O.defaultProps={images:[],showPagination:!0};var R=(0,A.ZP)(w.Z)(function(n){n.hidePrevButton,n.hideNextButton;var e,t=n.theme;return e={},(0,i.Z)(e,"&.MuiPagination-root",{alignSelf:"center",marginTop:"16px"}),(0,i.Z)(e,"& .MuiPaginationItem-root",{fontWeight:600,margin:0,borderRadius:0}),(0,i.Z)(e,"& .MuiPagination-ul > li:last-child .MuiPaginationItem-previousNext:last-child",{margin:0,borderRadius:"0 5px 5px 0"}),(0,i.Z)(e,"& .MuiPagination-ul > li:first-child .MuiPaginationItem-previousNext:last-child",{margin:0,borderRadius:"5px 0 0 5px"}),(0,i.Z)(e,"& button.Mui-selected",{color:t.palette.white.main,backgroundColor:t.palette.secondary.main}),e}),C=t(27434),Z=t(26143),U=t(9164),L=t(58095);function J(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,i)}return t}function E(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?J(Object(t),!0).forEach(function(e){(0,i.Z)(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):J(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}var k=function(n){var e=n.carousel,t=n.category,i=n.data,d=n.entity,q=n.entityId,A=n.filters,w=n.listView,j=n.mediaMeta,x=n.onMediaAdd,S=n.onMediaRemove,P=n.showActionButtons,T=n.showEntityColumn,R=n.showItemActions,J=n.title,k=n.type,F=n.expanded,D=n.onChangeExpanded,M=n.hideExpandIcon,N=n.mediaFormProps,G=n.offCanvasProps,H=n.onlySingleMedia,B=(0,p.x)({filters:A}),z=B.initialData,V=B.ref,W=(0,y.x)(),Q=W.hasRole,Y=W.user,K=(0,L.a)(),X=(0,o.a)(r.t,{variables:E(E({},z),{},{entity:d,entityId:q,category:t,adminId:Y.adminId,meta:j})}),nn=X.data,ne=(nn=void 0===nn?{items:[],meta:{aggregate:{totalCount:0}}}:nn).items,nt=nn.meta,ni=X.loading,no=X.refetch,nr=function(n){K.close(),i.length||no();var e=n.map(function(n){return E(E({},n),{},{link:"".concat("https://cleverly-media.s3.eu-west-2.amazonaws.com","/").concat(n.filename)})});x&&x(e)},na=function(n){K.close(),i.length||no(),S&&S(n)},ns=function(n){n.stopPropagation(),K.show(E({content:(0,m.jsx)(u.z,E({accept:"image/*",adminId:Y.adminId,category:t,entity:d,entityId:q,expiryShow:!1,mediaMeta:j,multiple:!0,onSuccess:nr,type:"image"},N)),title:"Upload Photos"},G))},nc=function(n){n.stopPropagation(),K.show(E({content:(0,m.jsx)(u.z,E({accept:".pdf, .doc, .docx, .xlsx",adminId:Y.adminId,category:t,entity:d,entityId:q,expiryShow:!1,mediaMeta:j,onSuccess:nr,type:"document"},N)),title:"Upload Documents"},G))},nu=function(n){K.show({content:(0,m.jsx)(s.d,{mediaId:n.data.id,onSuccess:na}),submit:!1,title:"Delete Media"})},nd=function(n){K.show({content:(0,m.jsx)(c.z,{media:n.data,toggleShow:K.close}),title:"Media Details",width:"50%"})},nm=function(n){return[{context:"primary",icon:"info",onClick:function(e){return nd(n)},tooltip:"Details"},{context:"danger",icon:"delete",onClick:function(e){return nu(n)},tooltip:"Delete"}]},nl=[],np=ne.filter(function(n){var e=n.item;return(null==e?void 0:e.visibility)&&Q(null==e?void 0:e.visibility)}).map(function(n){var e=n.entity,t=n.entityId,i=n.id,o=n.item,r=o.caption,a=o.filename,s=o.meta,c=o.name,u=o.type,d=o.user,m=o.visibility;return{data:o,id:i,userId:null==d?void 0:d.id,filename:a,visibility:m.join(", "),file:r||c||a,entity:e&&"".concat(e,"#").concat(t),authority:s,uploaded:"".concat(null==d?void 0:d.nameFirst," ").concat(null==d?void 0:d.nameLast),thumbnails:l(u,s),actions:""}}),ny=(ne.filter(function(n){var e=n.item;return(null==e?void 0:e.visibility)&&Q(null==e?void 0:e.visibility)}).forEach(function(n){var e=n.item,t=e.caption,i=e.filename;"image"===e.type&&nl.push({caption:t,filename:"".concat("https://cleverly-media.s3.eu-west-2.amazonaws.com","/").concat(i)})}),nl),nb=ny.length;return(0,m.jsxs)(f.Z,{expanded:F,onChange:D,children:[(0,m.jsx)(_.Z,E(E({},M?{}:{expandIcon:(0,m.jsx)(C.Z,{})}),{},{children:(0,m.jsx)(g.Z,{variant:"h6",children:J})})),(0,m.jsxs)(h.Z,{children:[e&&nb>0&&(0,m.jsx)(O,{height:"200px",images:ny}),(0,m.jsx)(a.i,{columns:[{field:"file",headerName:"File",flex:1,sortable:!1,renderCell:function(n){var e=n.row,t=n.value;return(0,m.jsx)(U.r,{color:"secondary",onClick:function(n){n.preventDefault(),window.open("".concat("https://cleverly-media.s3.eu-west-2.amazonaws.com","/").concat(e.filename))},children:t})}},{field:"visibility",headerName:"Visible to",flex:1,sortable:!1},{hide:!T,field:"entity",headerName:"Entity",flex:1,sortable:!1},{field:"authority",headerName:"",width:50,sortable:!1,renderCell:function(n){var e=n.value;return(0,m.jsx)(m.Fragment,{children:(null==e?void 0:e.adminOnly)&&(0,m.jsx)(b.Z,{title:"Admin user only",children:(0,m.jsx)(I.Z,{component:"img",alt:"Admin Only",src:"/messaging/admin-only.svg",sx:{height:"24px"}})})})}},{field:"uploaded",headerName:"Uploaded by",flex:1,sortable:!1},{hide:!w,field:"thumbnails",headerName:"Thumbnails",flex:1,sortable:!1,renderCell:function(n){var e=n.value;return"function"==typeof e?e():e}},{hide:!R,field:"actions",headerName:"",width:50,sortable:!1,renderCell:function(n){var e=n.row;return Q("admin")?(0,m.jsx)(Z.C,{actionsData:nm,row:e}):Y.id===e.userId?(0,m.jsx)(Z.C,{actionsData:nm,row:e}):null}}],rows:np,loading:ni,meta:nt,ref:V,refetch:no,columnVisibilityModel:{entity:T,thumbnails:w,actions:R}}),P&&!(H&&np.length>0)&&(0,m.jsxs)(v.Z,{direction:"row",justifyContent:"center",spacing:2,mt:2,children:[(!k||"document"===k)&&(0,m.jsx)($.Z,{variant:"contained",color:"secondary",onClick:nc,children:"Add Document"}),(!k||"image"===k||"avatar"===k)&&(0,m.jsxs)($.Z,{variant:"contained",color:"secondary",onClick:ns,children:["Add ",k?"".concat(k.charAt(0).toUpperCase()).concat(k.slice(1)):"Image"]})]})]})]})};k.defaultProps={carousel:!0,data:[],filters:{},listView:!1,mediaMeta:null,showActionButtons:!0,showEntityColumn:!1,showItemActions:!0,title:"Media",type:null,onChangeExpanded:function(){},mediaFormProps:{},offCanvasProps:{},category:"media",onlySingleMedia:!1}},72628:function(n,e,t){t.d(e,{BH:function(){return w},Dn:function(){return h},UA:function(){return A},Vr:function(){return v},_0:function(){return $},to:function(){return x},v8:function(){return q},yz:function(){return S},zn:function(){return j}});var i,o,r,a,s,c,u,d,m,l,p,y,b,I,f,_=t(71383),g=t(75063),h=(0,g.Ps)(i||(i=(0,_.Z)(["\n  query GetFinance($accountId: Int!) {\n    financial: Account_by_pk(id: $accountId) {\n      name\n      website\n      contactUsers: Account_Users(where: { isContact: { _eq: true } }) {\n        role\n        position\n        isContact\n        lastSignInAt\n        userId\n        user: User {\n          id\n          name: nameFirst\n          nameFirst\n          nameLast\n          phone\n          status\n          email\n          createdAt\n          fullName\n          accounts: Account_Users {\n            id\n            role\n            position\n            isContact\n            status\n            account: Account {\n              id\n              name\n              type\n            }\n          }\n        }\n      }\n      bankAccounts: BankAccounts {\n        id\n        stripeId\n        bank\n        accountNumber\n        routingNumber\n        bic\n        iban\n        status\n        default\n        createdAt\n      }\n      cards: Cards {\n        id\n        stripeId\n        type\n        last4\n        expYear\n        expMonth\n        status\n        default\n        createdAt\n      }\n    }\n  }\n"]))),v=(0,g.Ps)(o||(o=(0,_.Z)(["\n  mutation AddPaymentReceipt(\n    $object: AccountEntry_insert_input!\n    $jobIds: [Int]!\n    $changes: Job_set_input\n    $timing: [JobTiming_insert_input!]!\n  ) {\n    insert_AccountEntry_one(object: $object) {\n      id\n    }\n    update_Job(where: { id: { _in: $jobIds } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n    insert_JobTiming(objects: $timing) {\n      returning {\n        id\n      }\n    }\n  }\n"]))),$=(0,g.Ps)(r||(r=(0,_.Z)(["\n  mutation UpdateAccountEntry($id: Int!, $changes: AccountEntry_set_input!) {\n    update_AccountEntry_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n      meta\n      outstandingAmount\n      balance\n    }\n  }\n"]))),q=(0,g.Ps)(a||(a=(0,_.Z)(["\n  query GetAccountEntries(\n    $where: AccountEntry_bool_exp\n    $limit: Int\n    $offset: Int\n    $accountId: Int\n    $locationId: Int\n    $orderBy: [AccountEntry_order_by!]\n  ) {\n    accountEntries: getDashboard_AccountEntry_calculatebalance(\n      limit: $limit\n      offset: $offset\n      order_by: $orderBy\n      where: $where\n      args: { location_id: $locationId }\n    ) {\n      id\n      outstandingAmount\n      outstandingdays\n      type\n      entryId\n      jobId\n      locationId\n      currencyId\n      createdAt\n      balance\n      debit\n      credit\n      accountId\n      updatedAt\n      status\n      paymentStatus\n      meta\n      invoices: Invoices {\n        Job {\n          id\n          paid\n          reference\n          type\n          meta\n          number\n          status\n          location: Location {\n            id\n            name\n          }\n          service: Service {\n            name\n            id\n          }\n        }\n        id\n        items\n        status\n        createdAt\n        rebate\n        meta\n        totals\n        invoiceType\n        invoiceNumber\n        invoiceDate\n        expenses\n        entityId\n        entity\n        configs\n        amounts\n        addendum\n        addresses\n        adminId\n      }\n    }\n    meta: getDashboard_AccountEntry_calculatebalance_aggregate(\n      where: $where\n      args: { location_id: $locationId }\n    ) {\n      aggregate {\n        debitTotal: sum {\n          debit\n        }\n        creditTotal: sum {\n          credit\n        }\n        totalCount: count\n      }\n    }\n  }\n"]))),A=(0,g.Ps)(s||(s=(0,_.Z)(["\n  query GetAccountEntries($where: AccountEntry_bool_exp, $accountId: Int, $locationId: Int) {\n    accountEntries: getDashboard_AccountEntry_calculatebalance(\n      where: $where\n      args: { location_id: $locationId }\n      order_by: { createdAt: desc }\n    ) {\n      id\n      outstandingAmount\n      outstandingdays\n      type\n      entryId\n      jobId\n      locationId\n      currencyId\n      createdAt\n      balance\n      debit\n      credit\n      accountId\n      updatedAt\n      status\n      paymentStatus\n      meta\n      invoices: Invoices {\n        Job {\n          id\n          paid\n          reference\n          type\n          meta\n          number\n          status\n          location: Location {\n            id\n            name\n          }\n          sublocation: Sublocation {\n            id\n            name\n          }\n          service: Service {\n            name\n            id\n          }\n        }\n        id\n        items\n        status\n        createdAt\n        rebate\n        meta\n        totals\n        invoiceType\n        invoiceNumber\n        invoiceDate\n        expenses\n        entityId\n        entity\n        configs\n        amounts\n        addendum\n        addresses\n        adminId\n      }\n      reconciliations: InvoiceReconciliations_aggregate {\n        aggregate {\n          sum {\n            amount\n          }\n        }\n      }\n    }\n  }\n"]))),w=(0,g.Ps)(c||(c=(0,_.Z)(["\n  query GetAccountEntries(\n    $where: AccountEntry_bool_exp\n    $limit: Int\n    $offset: Int\n    $accountId: Int\n    $locationId: Int\n    $orderBy: [AccountEntry_order_by!]\n  ) {\n    accountEntries: getDashboard_AccountEntry_calculatebalance(\n      limit: $limit\n      offset: $offset\n      order_by: $orderBy\n      where: $where\n      args: { location_id: $locationId }\n    ) {\n      id\n      outstandingAmount\n      outstandingdays\n      type\n      createdAt\n      status\n      paymentStatus\n      meta\n      invoices: Invoices {\n        id\n        meta\n        invoiceType\n        invoiceNumber\n        amounts\n        Job {\n          id\n          number\n          type\n          status\n        }\n      }\n    }\n    meta: getDashboard_AccountEntry_calculatebalance_aggregate(\n      where: $where\n      args: { location_id: $locationId }\n    ) {\n      aggregate {\n        debitTotal: sum {\n          debit\n        }\n        creditTotal: sum {\n          credit\n        }\n        totalCount: count\n      }\n    }\n  }\n"])));(0,g.Ps)(u||(u=(0,_.Z)(["\n  query GetAccoutEntrySumByAccounntInJob($jobId: Int!, $accountId: Int!) {\n    accountEntryAggregate: AccountEntry_aggregate(\n      where: { Invoices: { Job: { id: { _eq: $jobId } } }, accountId: { _eq: $accountId } }\n    ) {\n      aggregate {\n        sum {\n          outstandingAmount\n        }\n      }\n    }\n  }\n"]))),(0,g.Ps)(d||(d=(0,_.Z)(["\n  query GetJobMeta($id: Int!) {\n    job: Job(where: { id: { _eq: $id } }) {\n      id\n      meta\n    }\n  }\n"]))),(0,g.Ps)(m||(m=(0,_.Z)(["\n  mutation UpdateJob($changes: Job_set_input, $ids: [Int]) {\n    update_Job(where: { id: { _in: $ids } }, _set: $changes) {\n      affected_rows\n    }\n  }\n"]))),(0,g.Ps)(l||(l=(0,_.Z)(["\n  mutation UpdateJob(\n    $id: Int!\n    $changes: Job_set_input\n    $timing: [JobTiming_insert_input!]!\n    $insertTiming: Boolean!\n  ) {\n    update_Job_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n    insert_JobTiming(objects: $timing) @include(if: $insertTiming) {\n      returning {\n        id\n        status\n        createdAt\n      }\n    }\n  }\n"])));var j=(0,g.Ps)(p||(p=(0,_.Z)(['\n  mutation DeletePayment($jobIds: [Int!], $timingStatuses: [String!], $paymentId: Int!) {\n    delete_JobTiming(where: { status: { _in: $timingStatuses }, jobId: { _in: $jobIds } }) {\n      returning {\n        id\n      }\n    }\n\n    delete_AccountEntry(\n      where: { type: { _in: ["paymentReceipt", "creditNote"] }, id: { _eq: $paymentId } }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n']))),x=(0,g.Ps)(y||(y=(0,_.Z)(['\n  query GetRelatedAccountEntries($accountEntryId: Int!) {\n    reconciliations: Reconciliation(\n      where: {\n        creditEntityId: { _eq: $accountEntryId }\n        creditEntity: { _in: ["PaymentReceipt", "CreditNote"] }\n      }\n    ) {\n      id\n      amount\n      createdAt\n      accountEntryPayment: PaymentEntry {\n        id\n      }\n      accountEntryInvoice: InvoiceEntry {\n        id\n        type\n        invoices: Invoices {\n          id\n          invoiceType\n          invoiceNumber\n          job: Job {\n            id\n            number\n            type\n            status\n            timings: JobTimings(order_by: { createdAt: desc }) {\n              id\n              status\n              createdAt\n            }\n          }\n        }\n      }\n    }\n  }\n']))),S=(0,g.Ps)(b||(b=(0,_.Z)(["\n  query GetRelatedInvoces($accountEntryId: Int!) {\n    invoices: Invoice(where: { accountEntryId: { _eq: $accountEntryId } }) {\n      id\n      invoiceNumber\n      Job {\n        id\n        number\n        type\n        status\n      }\n    }\n  }\n"])));(0,g.Ps)(I||(I=(0,_.Z)(['\n  query GetCalendarJobs($customerId: Int!) {\n    jobs: Job(\n      order_by: { timingStart: asc }\n      where: {\n        customerId: { _eq: $customerId }\n        jobScheduleId: { _is_null: false }\n        status: { _neq: "canceled" }\n      }\n    ) {\n      id\n      number\n      title\n      description\n      quoted\n      reference\n      timingStart\n      timingEnd\n      createdAt\n      status\n      jobScheduleId\n      supplierNotes\n      amount\n      supplierLabourAmount\n      rag\n      type\n      timings: JobTimings {\n        id\n        status\n        createdAt\n      }\n      supplier: Supplier {\n        id\n        name\n      }\n      shortJobDesc: Taxonomy(where: { Taxonomy: { type: { _eq: "jobTags" } } }) {\n        id\n        taxonomyId\n        comments\n        taxonomy: Taxonomy {\n          name\n        }\n      }\n    }\n  }\n']))),(0,g.Ps)(f||(f=(0,_.Z)(["\n  mutation AddCreditNote($object: AccountEntry_insert_input!) {\n    insert_AccountEntry_one(object: $object) {\n      id\n    }\n  }\n"])))},77010:function(n,e,t){t.d(e,{E:function(){return b}});var i=t(59499),o=t(94054),r=t(26447),a=t(40476),s=t(79717),c=t(50480),u=t(36872),d=t(15861),m=t(56815),l=t(85893);function p(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,i)}return t}function y(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?p(Object(t),!0).forEach(function(e){(0,i.Z)(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}var b=function(n){var e=n.label,t=n.options,i=n.error,p=n.helperText,b=n.stackProps,f=n.formControlProps,_=n.labelLeft,g=function(n){var e=n.children;return(0,l.jsx)(l.Fragment,{children:e})};return(0,l.jsxs)(o.Z,y(y({sx:{m:3},error:i,variant:"standard"},void 0===f?{}:f),{},{children:[(0,l.jsxs)(r.Z,y(y({},_&&I),{},{children:[e&&(0,l.jsx)(a.Z,{id:"radio-group",color:"secondary",children:e}),(0,l.jsx)(s.Z,y(y({},n),{},{"aria-labelledby":"radio-group",children:(0,l.jsx)(r.Z,y(y({},void 0===b?{}:b),{},{children:t.map(function(n){var e=n.value,t=n.label,i=n.icon,o=n.ParentComponent;return(0,l.jsx)(void 0===o?g:o,{children:(0,l.jsx)(c.Z,{value:e,control:(0,l.jsx)(u.Z,{color:"secondary"}),label:(0,l.jsxs)(r.Z,{direction:"row",alignItems:"center",spacing:1,children:[i,(0,l.jsx)(d.Z,{children:t})]})})})})}))}))]})),(0,l.jsx)(m.Z,{children:p})]}))};b.defaultProps={options:[],error:!1,helperText:"",stackProps:{},formControlProps:{},labelLeft:!1};var I={direction:"row",alignItems:"center",flexWrap:"wrap",spacing:1}},76301:function(n,e,t){t.d(e,{Ak:function(){return D},Cj:function(){return Q},K4:function(){return ni},Qn:function(){return k},RJ:function(){return W},SW:function(){return E},T_:function(){return B},UH:function(){return J},UM:function(){return ne},Ve:function(){return Y},_d:function(){return N},_f:function(){return nt},by:function(){return z},cz:function(){return Z},he:function(){return F},j$:function(){return M},kB:function(){return X},kU:function(){return K},kx:function(){return G},nD:function(){return L},nP:function(){return nr},pY:function(){return no},qd:function(){return U},t1:function(){return H},yR:function(){return V},zR:function(){return nn}});var i,o,r,a,s,c,u,d,m,l,p,y,b,I,f,_,g,h,v,$,q,A,w,j,x,S,P,T,O,R=t(71383),C=t(75063),Z=(0,C.Ps)(i||(i=(0,R.Z)(["\n  query GetAddressForSelect($q: String, $entity: String!, $entityId: Int!) {\n    items: Address(\n      where: {\n        Address_Entities: { entity: { _eq: $entity }, entityId: { _eq: $entityId } }\n        _or: [\n          { addressLine1: { _eq: $q } }\n          { addressLine2: { _eq: $q } }\n          { addressLine3: { _eq: $q } }\n          { county: { _eq: $q } }\n          { postCode: { _eq: $q } }\n          { city: { _eq: $q } }\n        ]\n      }\n    ) {\n      label: addressLine1\n      value: id\n      id\n      name\n      addressLine1\n      addressLine2\n      addressLine3\n      postCode\n      county\n      country: Country {\n        name\n      }\n      city\n      Address_Entities {\n        invoice\n      }\n    }\n  }\n"]))),U=(0,C.Ps)(o||(o=(0,R.Z)(["\n  query GetAccountsForSelect($q: String, $type: String, $limit: Int, $offset: Int) {\n    items: Account(\n      where: { name: { _ilike: $q }, type: { _eq: $type } }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]))),L=(0,C.Ps)(r||(r=(0,R.Z)(['\n  query GetTaxonomy($q: String, $id: Int) {\n    items: Taxonomy(\n      where: { type: { _eq: "assetCategory" }, status: { _eq: "active" } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      options: Taxonomies(\n        where: {\n          type: { _eq: "assetCategory" }\n          name: { _ilike: $q }\n          id: { _eq: $id }\n          status: { _eq: "active" }\n        }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']))),J=(0,C.Ps)(a||(a=(0,R.Z)(["\n  query GetAssetsForSelect($locationId: Int, $q: String, $categoryId: Int, $bookable: String) {\n    items: Asset(\n      where: {\n        categoryId: { _eq: $categoryId }\n        locationId: { _eq: $locationId }\n        name: { _ilike: $q }\n        bookable: { _eq: $bookable }\n      }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n      parent: ParentAsset {\n        id\n        name\n      }\n      media: Media {\n        id\n        item: Medium {\n          id\n          name\n          filename\n          meta\n          category\n          type\n        }\n      }\n    }\n  }\n"]))),E=(0,C.Ps)(s||(s=(0,R.Z)(['\n  query GetCustomersForSelect($q: String, $limit: Int, $offset: Int) {\n    items: Account(\n      where: { name: { _ilike: $q }, type: { _eq: "customer" } }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      admin: Admins {\n        id: adminId\n      }\n      label: name\n      spendThreshold: meta(path: "$.finance.spendThreshold")\n      serviceRateLabour: meta(path: "$.finance.serviceRateLabour")\n      serviceRateExpenses: meta(path: "$.finance.serviceRateExpenses")\n      value: id\n    }\n  }\n']))),k=(0,C.Ps)(c||(c=(0,R.Z)(["\n  query GetJobsForSelect($_q: Int, $locationId: Int) {\n    items: Job(\n      where: {\n        Location: { id: { _eq: $locationId } }\n        _or: [{ id: { _eq: $_q } }, { Invoices: { id: { _eq: $_q } } }]\n      }\n      order_by: { title: asc }\n    ) {\n      label: label\n      value: id\n      number\n      createdAt\n      description\n      status\n      timingStart\n      title\n      type\n      Location {\n        name\n      }\n      Taxonomy {\n        Taxonomy {\n          shortJobDescription: name\n        }\n      }\n    }\n  }\n"]))),F=(0,C.Ps)(u||(u=(0,R.Z)(['\n  query GetManagersForSelect($userId: Int, $accountId: Int!, $q: String) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: {\n          role: { _in: ["owner", "manager"] }\n          status: { _eq: "active" }\n          Account: { id: { _eq: $accountId } }\n        }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n        id: { _neq: $userId }\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n    }\n  }\n']))),D=(0,C.Ps)(d||(d=(0,R.Z)(['\n  query GetManagersForSelect(\n    $userId: Int\n    $accountId: Int!\n    $q: String\n    $invoiceThreshold: numeric\n    $quoteThreshold: numeric\n  ) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: {\n          role: { _in: ["owner", "manager"] }\n          status: { _eq: "active" }\n          Account: { id: { _eq: $accountId } }\n        }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n        id: { _neq: $userId }\n        _and: [\n          {\n            _or: [\n              { invoiceThreshold: { _gt: $invoiceThreshold } }\n              { invoiceThreshold: { _is_null: true } }\n            ]\n          }\n          {\n            _or: [\n              { quoteThreshold: { _gt: $quoteThreshold } }\n              { quoteThreshold: { _is_null: true } }\n            ]\n          }\n        ]\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n    }\n  }\n']))),M=(0,C.Ps)(m||(m=(0,R.Z)(["\n  query GetPostCodeAreaForSelect($countryId: Int, $q: String) {\n    items: PostcodeArea(\n      where: { name: { _ilike: $q }, countryId: { _eq: $countryId } }\n      order_by: { name: asc }\n    ) {\n      area\n      label: name\n      value: id\n    }\n  }\n"]))),N=(0,C.Ps)(l||(l=(0,R.Z)(['\n  query GetPropertiesForSelect($where: Location_bool_exp, $limit: Int, $offset: Int) {\n    items: Location(where: $where, order_by: { name: asc }, limit: $limit, offset: $offset) {\n      label: name\n      value: id\n      access\n      permitsRequired\n      registeredAddress: Addresses(\n        where: { entity: { _eq: "Location" }, registered: { _eq: true } }\n      ) {\n        address: Address {\n          id\n          addressLine1\n          addressLine2\n          addressLine3\n          county\n          country: Country {\n            name\n          }\n          postCode\n          city\n        }\n      }\n    }\n  }\n']))),G=(0,C.Ps)(p||(p=(0,R.Z)(['\n  query GetServicesForSelect($q: String, $limit: Int, $offset: Int) {\n    items: Service(\n      where: { name: { _ilike: $q }, status: { _eq: "active" } }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n']))),H=(0,C.Ps)(y||(y=(0,R.Z)(["\n  query GetSlasForSelect($q: String, $adminId: Int, $type: String) {\n    items: SLA(\n      where: { name: { _ilike: $q }, type: { _eq: $type }, adminId: { _eq: $adminId } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]))),B=(0,C.Ps)(b||(b=(0,R.Z)(["\n  query GetSlasForSelectNew($where: SLA_bool_exp, $limit: Int, $offset: Int) {\n    items: SLA(where: $where, order_by: { name: asc }, limit: $limit, offset: $offset) {\n      label: name\n      value: id\n    }\n  }\n"]))),z=(0,C.Ps)(I||(I=(0,R.Z)(["\n  query GetSuppliersForSelect($where: Account_bool_exp, $limit: Int, $offset: Int) {\n    items: Account(where: $where, limit: $limit, offset: $offset, order_by: { name: asc }) {\n      label: name\n      value: id\n    }\n  }\n"]))),V=(0,C.Ps)(f||(f=(0,R.Z)(['\n  query GetUsersForSelect($accountId: Int, $q: String, $limit: Int, $offset: Int) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: {\n          accountId: { _eq: $accountId }\n          isContact: { _eq: true }\n          status: { _eq: "active" }\n        }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n      }\n      order_by: { nameFirst: asc }\n      limit: $limit\n      offset: $offset\n    ) {\n      label: fullName\n      value: id\n      email\n      phone\n    }\n  }\n']))),W=(0,C.Ps)(_||(_=(0,R.Z)(['\n  query GetUsersForSelect($q: String) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n      email\n      phone\n    }\n  }\n']))),Q=(0,C.Ps)(g||(g=(0,R.Z)(["\n  query GetTaxonomyGroupForSelect($q: String, $type: String!) {\n    items: Taxonomy(\n      where: { isGroup: { _eq: true }, name: { _ilike: $q }, type: { _eq: $type } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]))),Y=(0,C.Ps)(h||(h=(0,R.Z)(['\n  query GetTaxonomy($q: String) {\n    items: Taxonomy(where: { type: { _eq: "expenseCategoryGroup" } }, order_by: { name: asc }) {\n      label: name\n      options: Taxonomies(\n        where: { type: { _eq: "expenseCategory" }, name: { _ilike: $q } }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']))),K=(0,C.Ps)(v||(v=(0,R.Z)(['\n  query GetCompliancesForSelect($q: String, $locationId: Int) {\n    items: Taxonomy(where: { type: { _eq: "complianceCategory" } }, order_by: { name: asc }) {\n      label: name\n      options: Compliances(\n        where: {\n          name: { _ilike: $q }\n          Compliance_Entities: { Location: { id: { _eq: $locationId } } }\n        }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']))),X=(0,C.Ps)($||($=(0,R.Z)(["\n  query GetUserRole($userId: Int!, $accountId: Int!) {\n    accountUsers: Account_User(\n      where: { userId: { _eq: $userId }, accountId: { _eq: $accountId } }\n    ) {\n      role\n    }\n  }\n"]))),nn=(0,C.Ps)(q||(q=(0,R.Z)(["\n  query GetSublocationsForSelect($locationId: Int!, $q: String, $limit: Int, $offset: Int) {\n    items: Sublocation(\n      where: { name: { _ilike: $q }, locationId: { _eq: $locationId }, active: { _eq: true } }\n      limit: $limit\n      offset: $offset\n      order_by: { createdAt: desc }\n    ) {\n      value: id\n      label: name\n    }\n  }\n"]))),ne=(0,C.Ps)(A||(A=(0,R.Z)(['\n  query GetTaxonomy($q: String, $id: Int, $limit: Int, $offset: Int) {\n    items: Taxonomy(\n      where: {\n        id: { _eq: $id }\n        type: { _eq: "assetCategory" }\n        isGroup: { _eq: false }\n        status: { _eq: "active" }\n        name: { _ilike: $q }\n      }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n']))),nt=(0,C.Ps)(w||(w=(0,R.Z)(["\n  query GetTaxonomyForSelect(\n    $where: Taxonomy_bool_exp\n    $limit: Int\n    $offset: Int\n    $orderBy: Taxonomy_order_by!\n  ) {\n    items: Taxonomy(where: $where, limit: $limit, offset: $offset, order_by: [$orderBy]) {\n      value: id\n      label: name\n    }\n  }\n"])));(0,C.Ps)(j||(j=(0,R.Z)(['\n  query GetTagsForTask($q: String!, $limit: Int = 50, $offset: Int = 0) {\n    items: Taxonomy(\n      where: { name: { _ilike: $q }, status: { _eq: "active" }, type: { _eq: "taskTags" } }\n      limit: $limit\n      offset: $offset\n      order_by: { id: desc }\n    ) {\n      value: id\n      label: name\n    }\n  }\n']))),(0,C.Ps)(x||(x=(0,R.Z)(['\n  query GetTagsForEntity(\n    $entityId: Int\n    $entity: String!\n    $q: String!\n    $limit: Int = 50\n    $offset: Int = 0\n  ) {\n    tags: Taxonomy(\n      where: {\n        name: { _ilike: $q }\n        status: { _eq: "active" }\n        type: { _eq: "taskTags" }\n        _not: { Taxonomy_Entities: { entity: { _eq: $entity }, entityId: { _eq: $entityId } } }\n      }\n      limit: $limit\n      offset: $offset\n      order_by: { id: desc }\n    ) {\n      id\n      name\n      meta\n    }\n  }\n']))),(0,C.Ps)(S||(S=(0,R.Z)(['\n  query GetEntityTags($entityId: Int!, $entity: String!) {\n    tags: Taxonomy_Entity(\n      where: {\n        entity: { _eq: $entity }\n        entityId: { _eq: $entityId }\n        Taxonomy: { status: { _eq: "active" }, type: { _eq: "taskTags" } }\n      }\n      order_by: { id: desc }\n    ) {\n      id\n      tag: Taxonomy {\n        id\n        name\n        meta\n      }\n    }\n  }\n'])));var ni=(0,C.Ps)(P||(P=(0,R.Z)(["\n  query GetCustomerManagers($accountId: Int, $q: String, $limit: Int, $offset: Int) {\n    items: User(\n      where: { Account_Users: { accountId: { _eq: $accountId } }, fullName: { _ilike: $q } }\n      order_by: { fullName: asc }\n      limit: $limit\n      offset: $offset\n    ) {\n      label: fullName\n      value: id\n    }\n  }\n"]))),no=(0,C.Ps)(T||(T=(0,R.Z)(["\n  query GetServiceSchedulesForSelect(\n    $q: String\n    $serviceId: Int\n    $entity: service_schedule_entity\n    $entityId: Int\n    $limit: Int = 50\n    $offset: Int = 0\n  ) {\n    items: ServiceSchedule(\n      where: {\n        name: { _ilike: $q }\n        serviceId: { _eq: $serviceId }\n        entity: { _eq: $entity }\n        entityId: { _eq: $entityId }\n      }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]))),nr=(0,C.Ps)(O||(O=(0,R.Z)(['\n  query GetPropertyById($id: Int!) {\n    item: Location_by_pk(id: $id) {\n      label: name\n      value: id\n      access\n      registeredAddress: Addresses(\n        where: { entity: { _eq: "Location" }, registered: { _eq: true } }\n      ) {\n        address: Address {\n          id\n          addressLine1\n          addressLine2\n          addressLine3\n          county\n          country: Country {\n            name\n          }\n          postCode\n          city\n        }\n      }\n    }\n  }\n'])))},71772:function(n,e,t){t.d(e,{P:function(){return w}});var i=t(59499),o=t(50029),r=t(4730),a=t(64687),s=t.n(a),c=t(67294),u=t(10367),d=t(66252),m=t(76301),l=t(78289),p=t(52019),y=t(49501),b=t(9270),I=t(62140),f=t(84043),_=t(77439),g=t(85893),h=["AddForm","accountId","area","assetCategoryId","control","entity","entityId","errors","id","isClearable","isDisabled","label","locationId","name","serviceId","taxonomyGroupType","customerId","customerRole","type","userId","invoiceThreshold","quoteThreshold"];function v(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,i)}return t}function $(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?v(Object(t),!0).forEach(function(e){(0,i.Z)(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):v(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}var q=function(n,e){var t,i,o,r=!0;return(null===(t=n.errors[n.name])||void 0===t?void 0:t.message)!==(null===(i=e.errors[e.name])||void 0===i?void 0:i.message)&&(r=!1),["accountId","assetCategoryId","entity","entityId","locationId","serviceId","type","value","customerId","customerRole"].forEach(function(t){n[t]!==e[t]&&(r=!1)}),r},A=function(n){var e=n.accountId,t=n.area,i=n.assetCategoryId,o=n.entity,r=n.entityId,a=(n.hasRole,n.id),s=n.locationId,c=n.serviceId,u=n.taxonomyGroupType,d=n.customerId,l=n.customerRole,p=n.type,y=n.userId,b=n.invoiceThreshold,I=n.quoteThreshold,f=p;switch(l&&(f="".concat(p,"_").concat(l)),f){case"address":return{query:m.cz,variables:{entity:o,entityId:r}};case"asset":return{query:m.UH,variables:{categoryId:i,locationId:s}};case"assetBookable":return{query:m.UH,variables:{categoryId:i,locationId:s,bookable:"yes"}};case"assetCategory":return{query:m.nD,variables:{id:a}};case"assetSublocation":return{query:m.UH,variables:{category:"sublocation",adminId:e,locationId:s}};case"compliance":return{query:m.kU,variables:{locationId:s}};case"coverage":return{query:m.j$};case"customer":return{query:m.SW};case"job":return{query:m.Qn,variables:{locationId:s}};case"manager":return{query:m.he,variables:{accountId:e,userId:y}};case"thresholdManagers":return{query:m.Ak,variables:{accountId:e,userId:y,invoiceThreshold:b,quoteThreshold:I}};case"product":return{query:m.UH,variables:{category:"product",locationId:s}};case"property":return{query:m._d,variables:{where:{status:{_eq:"active"},Account_Locations:{accountId:{_eq:e}}}}};case"property_user":return{query:m._d,variables:{where:{status:{_eq:"active"},Account_Locations:{accountId:{_eq:e},Account:{type:{_eq:"customer"},Account_Users:{role:{_eq:"user"},userId:{_eq:d}}},User_Account_Locations:{Account_User:{userId:{_eq:d},accountId:{_eq:e}}}}}}};case"sensor":return{query:m.UH,variables:{category:"sensor",locationId:s}};case"service":return{query:m.kx};case"sla":return{query:m.t1,variables:{type:"priority",adminId:e}};case"sublocation":return{query:m.zR,variables:{locationId:s}};case"supplier":var _={type:{_eq:"supplier"}};return t&&(_.PostcodeAreas={PostcodeArea:{area:{_eq:t}},entity:{_eq:"Account"},status:{_eq:"active"}}),c&&(_.ServiceSchedule={status:{_eq:"active"},entity:{_eq:"Supplier"},serviceId:{_eq:c}},t&&(_.ServiceSchedule.PostcodeAreas={PostcodeArea:{area:{_eq:t}}})),{query:m.by,variables:{where:_}};case"user":return{query:m.yR,variables:{accountId:e}};case"usersForBookings":return{query:m.yR,variables:{accountId:y}};case"tenant":return{query:m.RJ};case"taxonomyGroup":return{query:m.Cj,variables:{type:u}};case"expenseCategory":return{query:m.Ve};default:return{query:m.qd}}},w=(0,c.memo)(function(n){var e,t=n.AddForm,i=n.accountId,a=n.area,u=n.assetCategoryId,m=n.control,v=n.entity,q=n.entityId,w=n.errors,x=n.id,S=n.isClearable,P=n.isDisabled,T=n.label,O=n.locationId,R=n.name,C=n.serviceId,Z=n.taxonomyGroupType,U=n.customerId,L=n.customerRole,J=n.type,E=n.userId,k=n.invoiceThreshold,F=n.quoteThreshold,D=(0,r.Z)(n,h),M=(0,d.x)(),N=(0,c.useState)(!1),G=N[0],H=N[1],B=(0,c.useState)(),z=B[0],V=B[1],W=(0,c.useState)(!1),Q=W[0],Y=W[1],K=(0,c.useContext)(l.Z),X=(0,c.useContext)(p.Z).hasRole,nn=(0,c.useState)(!1),ne=nn[0],nt=nn[1];(0,c.useEffect)(function(){return nt(!1),Y(!1),function(){}},[i,u,v,q,O,C,J,U,L,E]);var ni=(e=(0,o.Z)(s().mark(function n(){var e,t,o,r,c,d,m;return s().wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(!Q){n.next=3;break}return nt(!0),n.abrupt("return",null);case 3:return H(!0),t=(e=A({accountId:i,area:a,assetCategoryId:u,entity:v,entityId:q,hasRole:X,id:x,locationId:O,serviceId:C,taxonomyGroupType:Z,customerId:U,customerRole:L,type:J,userId:E,invoiceThreshold:k,quoteThreshold:F})).query,r=void 0===(o=e.variables)?{}:o,n.next=7,M.query({query:t,variables:$({},r)});case 7:V((d=void 0===(d=n.sent.data)?{items:[]}:d).items),H(!1),Y(!0),nt(!0);case 15:case"end":return n.stop()}},n)})),function(){return e.apply(this,arguments)}),no=function(){K.show({content:(0,g.jsx)("div",{children:(0,g.jsx)(t,{})}),title:"Add form"})};return(0,g.jsx)(y.Z,{id:R,label:T,children:(0,g.jsxs)(b.Z,{children:[(0,g.jsx)(I.Z,{md:t?11:12,children:(0,g.jsx)(f.Z,$({autoload:!1,blurInputOnSelect:!0,cacheOptions:!0,control:m,errors:w,isDisabled:P,isClearable:S,isLoading:G,menuIsOpen:ne,options:z,onFocus:ni,onBlur:function(){nt(!1)},name:R,searchable:!0},D),D.defaultValue)}),t&&(0,g.jsx)(I.Z,{md:1,children:(0,g.jsx)(j,{children:(0,g.jsx)(_.Z,{content:null,startIcon:"plus",size:"sm",onClick:no})})})]})})},q),j=u.ZP.div.withConfig({displayName:"select__ButtonWrapper",componentId:"sc-v7qj9m-0"})(["position:relative;right:25px;top:2px;"]);w.defaultProps={isClearable:!0,label:"Account",name:"account",type:"account"}},46718:function(n,e,t){t.d(e,{$:function(){return u}});var i,o=t(50029),r=t(64687),a=t.n(r),s=t(94568),c=t(60036),u=(i=(0,o.Z)(a().mark(function n(e){var t;return a().wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return(0,s.a)()||(t=window.open("/download","_blank")),n.next=3,window.fetch("".concat("https://aws.cleverly.works","/pdf/invoice/ppmNew/create"),{method:"POST",headers:{"Content-Type":"application/json; charset=utf-8"},body:JSON.stringify(e)}).then(function(n){return n.json()}).then(function(n){var e,i,o,r,a;null===(e=t)||void 0===e||null===(i=e.location)||void 0===i||i.assign("".concat("https://cleverly-media.s3.eu-west-2.amazonaws.com","/").concat(n.key)),null!==(o=window)&&void 0!==o&&null!==(r=o.Capacitor)&&void 0!==r&&null!==(a=r.Plugins)&&void 0!==a&&a.Browser&&window.Capacitor.Plugins.Browser.open({url:"".concat("https://cleverly-media.s3.eu-west-2.amazonaws.com","/").concat(n.key)})}).catch(function(n){(0,c.Tb)({message:n,section:"fetch"})});case 3:case"end":return n.stop()}},n)})),function(n){return i.apply(this,arguments)})},73845:function(n,e,t){t.d(e,{j:function(){return c}});var i,o=t(50029),r=t(64687),a=t.n(r),s=t(38512),c=(i=(0,o.Z)(a().mark(function n(e){var t,i,o,r,c;return a().wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.client,i=e.customerId,o=e.scheduleId,r=e.locationId,c=[],n.next=4,t.mutate({mutation:s.iU,variables:{customerId:i,scheduleId:o,locationId:r}}).then(function(n){var e,t,i;c.push((null==n?void 0:null===(e=n.data)||void 0===e?void 0:null===(t=e.calculateJobFinance)||void 0===t?void 0:null===(i=t.data)||void 0===i?void 0:i.updatedFinances)||[])});case 4:return n.abrupt("return",{updatedJobs:c});case 5:case"end":return n.stop()}},n)})),function(n){return i.apply(this,arguments)})},58681:function(n,e,t){t.d(e,{SR:function(){return a},Tq:function(){return s},YK:function(){return r},cJ:function(){return o},pX:function(){return i}});var i=["customerVat","supplier"],o=["ProformaInvoiceCustomer","ProformaInvoiceSupplier"],r=["customerPpmInvoice","supplierPpmInvoice"],a={customer:["customerVat","ProformaInvoiceCustomer","customerPpmInvoice"],supplier:["supplier","ProformaInvoiceSupplier","supplierPpmInvoice"]},s={customerVat:"Customer VAT Invoice",supplier:"Supplier Invoice",ProformaInvoiceCustomer:"Customer ad-hoc Invoice",ProformaInvoiceSupplier:"Supplier ad-hoc Invoice",customerPpmInvoice:"PPM Customer Invoice",supplierPpmInvoice:"PPM Supplier Invoice"}}}]);